import{_ as s,a,b as n,c as p,e as c,i as l,n as h,o as t,p as e,q as i,s as d,N as v,H as o,I as r,G as k,x as m,C as u,E as g,O as f,J as b,K as x,v as y,y as $,z as C,t as I,B as w,L as S,f as L,g as E,M as T}from"./xtr-renderer-5bd82e7e.js";var M,B={categories:[{title:"base concepts",code:"base",items:[{title:"hello world",code:"hello",content:"<div class='text'><h1> Hello World </><*notions><.notion name='XJS template functions'> XJS basics: template, elements and text nodes </><.notion name='template arguments'> create template parameters </><.notion name='template instantiation'> create and render a template instance </><.notion name='mental model & code generation'> understand how ivy works and how to debug </></><p> ... </></><*code indicators='top;bottom'><div class='extract ts'><div><span class='hk'>import</> { <span class='hv'>template</> } <span class='hk'>from</> <span class='hs'>\"..!/..!/..!/iv\"</>;</><div> </><div><span class='hr'>const</> <span class='hv'>hello</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>name</><span class='hk'>:</><span class='hy'>string</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"hello\"</><span class='hp'>></></><div><span class='hs'>        # Hello <span class='hd'>{</><span class='hv'>name</><span class='hd'>}</>!! #</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>}`);</><div> </><div><span class='hf'>hello</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({ name: <span class='hs'>\"World\"</> });</></></><div class='text'><p> .... </></><*code><div class='extract ts'><div><span class='hc'>!/!/ mental model equivalence </></><div><span class='hc'>!/!/ (actual code generation is more complex but follows the same principle)</></><div><span class='hr'>const</> <span class='hv'>hello</> <span class='hk'>=</> <span class='hf'>template</>(`</><div>(<span class='hv'>name</><span class='hk'>:</><span class='hy'>string</>) <span class='hr'>=></> {        <span class='hc'>!/!/ equivalent to ($api:{name:string}, $ctxt) => {</></><div>                          <span class='hc'>!/!/ let name = $api[\"name\"];</></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"hello\"</><span class='hp'>></>   <span class='hc'>!/!/ equivalent to $ctxt.createElt(\"div\", 1, {class:\"hello\"});</></><div><span class='hs'>        # Hello <span class='hd'>{</><span class='hv'>name</><span class='hd'>}</>!! #</> <span class='hc'>!/!/ equivalent to $ctxt.addText(1, [\" Hello \", name, \"!! \"]);</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></>                <span class='hc'>!/!/ equivalent to $ctxt.closeElt(1);</></><div>}`);</></></><div class='text'><p> .... </></><*code><div class='extract ts'><div><span class='hk'>import</> { <span class='hv'>template</>, <span class='hv'>ζinit</>, <span class='hv'>ζend</>, <span class='hv'>ζelt</>, <span class='hv'>ζtxt</>, <span class='hv'>ζe</>, <span class='hv'>ζΔD</>, <span class='hv'>ζΔfStr</>, <span class='hv'>ζΔp</>, <span class='hv'>ζt</> } <span class='hk'>from</> <span class='hs'>\"..!/..!/..!/iv\"</>;</><div> </><div><span class='hr'>const</> <span class='hv'>hello</> <span class='hk'>=</> (<span class='hr'>function</> () {</><div><span class='hr'>const</> <span class='hv'>ζs0</> <span class='hk'>=</> {}, <span class='hv'>ζs1</> <span class='hk'>=</> [<span class='hs'>\"class\"</>, <span class='hs'>\"hello\"</>], <span class='hv'>ζs2</> <span class='hk'>=</> [<span class='hs'>\" Hello \"</>, <span class='hs'>\"\"</>, <span class='hs'>\"!! \"</>];</><div>@<span class='hv'>ζΔD</> <span class='hr'>class</> <span class='ht'>ζParams</> {</><div>    <span class='hv'>ΔΔname</><span class='hk'>:</> <span class='hy'>string</>; @<span class='hf'>ζΔp</>(<span class='hv'>ζΔfStr</>) <span class='hv'>name</><span class='hk'>:</> <span class='hy'>string</>;</><div>}</><div><span class='hk'>return</> <span class='hf'>ζt</>(<span class='hs'>\"hello\"</>, <span class='hs'>\"hello!/hello.ts\"</>, <span class='hv'>ζs0</>, <span class='hr'>function</> (<span class='hv'>ζ</>, <span class='hv'>$</>, <span class='hv'>$api</>) {</><div>    <span class='hr'>let</> <span class='hv'>name</> <span class='hk'>=</> <span class='hv'>$api</>[<span class='hs'>\"name\"</>];</><div>    <span class='hr'>let</> <span class='hv'>ζc</> <span class='hk'>=</> <span class='hf'>ζinit</>(<span class='hv'>ζ</>, <span class='hv'>ζs0</>, <span class='hn'>2</>);</><div>    <span class='hf'>ζelt</>(<span class='hv'>ζ</>, <span class='hv'>ζc</>, <span class='hn'>0</>, <span class='hn'>0</>, <span class='hs'>\"div\"</>, <span class='hn'>1</>, <span class='hn'>0</>, <span class='hv'>ζs1</>);</><div>    <span class='hf'>ζtxt</>(<span class='hv'>ζ</>, <span class='hv'>ζc</>, <span class='hn'>0</>, <span class='hn'>1</>, <span class='hn'>1</>, <span class='hn'>0</>, <span class='hv'>ζs2</>, <span class='hn'>1</>, <span class='hf'>ζe</>(<span class='hv'>ζ</>, <span class='hn'>0</>, <span class='hv'>name</>));</><div>    <span class='hf'>ζend</>(<span class='hv'>ζ</>, <span class='hv'>ζc</>);</><div>}, <span class='hv'>ζParams</>);</><div>})();</><div> </><div><span class='hf'>hello</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({ name: <span class='hs'>\"World\"</> });</></></>"},{title:"binding expressions",code:"expressions",content:"<div class='text'><h1> Expressions & properties </><*notions><.notion name='binding expressions'> bind JS values to DOM elements and text nodes </><.notion name='attributes vs. properties'> target DOM attributes or properties </><.notion name='setting or removing attributes'> e.g. to enable or disable an input or button </><.notion name='one-time bindings'> avoid recalculating expressions that don't change (e.g. translation values) </><.notion name='manual re-rendering'> to synchronously (re-)render a template instance </></><p> .... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>samples</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>data</>, <span class='hv'>text</> <span class='hk'>=</> <span class='hs'>\"[no text]\"</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>title</><span class='hk'>=</><span class='hd'>{</><span class='hv'>data</>.<span class='hv'>title</><span class='hd'>}</><span class='hp'>></><span class='hs'> # This text has a dynamic tooltip #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='hd'>[</><span class='ho'>className</><span class='hd'>]</><span class='hk'>=</><span class='hd'>{</><span class='hv'>data</>.<span class='hv'>className</><span class='hd'>}</><span class='hp'>></><span class='hs'> # This text should be blue #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hd'>{</><span class='hv'>data</>.<span class='hv'>cls</><span class='hd'>}</><span class='hp'>></><span class='hs'> # This text should be green #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>data</>.<span class='hv'>txt</> <span class='hk'>+</> \"!!\"<span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"dynamic\"</> <span class='ho'>title</><span class='hk'>=</><span class='hn'>123</><span class='hp'>></> </><div><span class='hs'>        # This is also dynamic: <span class='hd'>{</><span class='hf'>processText</>(<span class='hv'>text</>)<span class='hd'>}</> #</> </><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # This will be set only once: <span class='hd'>{</><span class='hd'>::</><span class='hf'>processText</>(<span class='hv'>text</>)<span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"info blue\"</><span class='hp'>></><span class='hs'> # >>> Click to refresh #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>function</> <span class='hf'>processText</>(<span class='hv'>t</><span class='hk'>:</> <span class='hy'>string</>) {</><div>    <span class='hk'>return</> <span class='hs'>\"~ \"</> <span class='hk'>+</> <span class='hv'>t</> <span class='hk'>+</> <span class='hs'>\" ~\"</>;</><div>}</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>data</> <span class='hk'>=</> {</><div>    title: <span class='hs'>\"Hello World\"</>,</><div>    className: <span class='hs'>\"blue\"</>,</><div>    cls: <span class='hs'>\"green\"</>,</><div>    txt: <span class='hs'>\"Dynamic text\"</></><div>}</><div><span class='hr'>const</> <span class='hv'>sample</> <span class='hk'>=</> <span class='hf'>samples</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({</><div>    <span class='hv'>data</>,</><div>    text: <span class='hs'>\"Hello ivy\"</></><div>});</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>count</> <span class='hk'>=</> <span class='hn'>0</>;</><div><span class='hv'>document</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hv'>count</><span class='hk'>++</>;</><div>    <span class='hv'>data</>.<span class='hv'>title</> <span class='hk'>+=</> <span class='hs'>\" +\"</> <span class='hk'>+</> <span class='hv'>count</>;</><div>    <span class='hv'>data</>.<span class='hv'>txt</> <span class='hk'>+=</> <span class='hs'>\" +\"</> <span class='hk'>+</> <span class='hv'>count</>;</><div>    <span class='hv'>sample</>.<span class='hv'>api</>.<span class='hv'>text</> <span class='hk'>+=</> <span class='hs'>\" +\"</> <span class='hk'>+</> <span class='hv'>count</>;</><div>    <span class='hc'>!/!/ note: data is also accessible through sample.api.data</></><div>    <span class='hv'>sample</>.<span class='hf'>render</>();</><div>});</></></>"},{title:"sub-templates",code:"subtemplates",content:"<div class='text'><h1> Sub-templates </><*notions><.notion name='sub-templates'> calling a template from another template </><.notion name='arguments default values'> to specify the default value of a template parameter</></><p> ... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>name</><span class='hk'>:</><span class='hy'>string</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"main\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>*greet</> <span class='ho'>name</><span class='hk'>=</><span class='hs'>\"Homer\"</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>*greet</><span class='ho'> <span class='hd'>{</><span class='hv'>name</><span class='hd'>}</></> <span class='ho'>suffix</><span class='hk'>=</><span class='hs'>\"!!!!!!\"</><span class='hp'>!/</><span class='hp'>></> <span class='hc'>!/!/ {name} is equivalent to name={name}</></><div>        <span class='hp'>!<</><span class='hg'>*greet</> <span class='ho'>className</><span class='hk'>=</><span class='hs'>\"blue\"</> <span class='ho'>name</><span class='hk'>=</><span class='hs'>\"Maggie\"</> <span class='ho'>suffix</><span class='hk'>=</><span class='hs'>\":-)\"</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>greet</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>name</><span class='hk'>:</><span class='hy'>string</>, <span class='hv'>suffix</><span class='hk'>=</><span class='hs'>\"!!\"</>, <span class='hv'>className</><span class='hk'>=</><span class='hs'>\"\"</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"greeting \"</> <span class='hk'>+</> <span class='hv'>className</><span class='hd'>}</><span class='hp'>></></><div><span class='hs'>        # Hello <span class='hd'>{</><span class='hv'>name</><span class='hd'>}</> #</></><div>        <span class='hp'>!<</><span class='hg'>*text</> <span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hv'>suffix</><span class='hd'>}</> <span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>text</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>value</><span class='hk'>:</><span class='hy'>string</>) <span class='hr'>=></> {</><div><span class='hs'>    # <span class='hd'>{</><span class='hv'>value</><span class='hd'>}</> #</></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({ name: <span class='hs'>\"Marge\"</> });</></></>"},{title:"loops & conditions",code:"loops",content:"<div class='text'><h1> Variables, loops and conditions </><*notions><.notion name='JS statements'> using js statements to control template rendering output </><.notion name='array arguments naming convention'> e.g. xxxList </><.notion name='debugging'> with console.log(...) or debugger statements </></><p> Presentation... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>greetings</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>nameList</><span class='hk'>:</><span class='hy'>string</>[]) <span class='hr'>=></> {</><div>    <span class='hr'>let</> <span class='hv'>count</><span class='hk'>=</><span class='hn'>0</>;</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"rows\"</><span class='hp'>></></><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>name</> <span class='hk'>of</> <span class='hv'>nameList</>) {</><div>            <span class='hp'>!<</><span class='hg'>*row</> <span class='ho'>text</><span class='hk'>=</><span class='hd'>{</><span class='hv'>name</><span class='hd'>}</> <span class='ho'>oddBkg</><span class='hk'>=</><span class='hd'>{</><span class='hv'>count</> <span class='hk'>%</> <span class='hn'>2</> <span class='hk'>===</> <span class='hn'>1</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hv'>count</><span class='hk'>++</>;</><div>            <span class='hc'>!/!/ open your console to see those logs</></><div>            console.log(<span class='hs'>\"greetings data: \"</>, <span class='hv'>name</>, <span class='hv'>count</>);</><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>row</>);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>row</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>text</><span class='hk'>:</><span class='hy'>string</>, <span class='hv'>oddBkg</><span class='hk'>=</><span class='hn'>false</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hd'>{</><span class='hv'>oddBkg</><span class='hk'>?</> <span class='hs'>\"odd\"</> <span class='hk'>:</> <span class='hs'>\"even\"</><span class='hd'>}</><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>text</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hk'>if</> (<span class='hv'>oddBkg</>) {</><div>        <span class='hp'>!<</><span class='hg'>hr</><span class='hp'>!/</><span class='hp'>></></><div>    }</><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hf'>greetings</>()</><div>    .<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>)</><div>    .<span class='hf'>render</>({ nameList: [<span class='hs'>\"Homer\"</>, <span class='hs'>\"Marge\"</>, <span class='hs'>\"Bart\"</>, <span class='hs'>\"Lisa\"</>, <span class='hs'>\"Maggie\"</>] });</></></>"},{title:"templates with content",code:"section",content:"<div class='text'><h1> Templates with content elements </><*notions><.notion name='container templates'> i.e. template that accept content as argument </><.notion name='@content decorator'> to re-inject some content passed as argument </><.notion name='XJS fragment nodes'> to group XJS nodes without creating any DOM container elements </><.notion name='$content parameter'> i.e. the default template content </><.notion name='simple param nodes'> to accept multiple content values </></><p> Presentation... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>groups</> <span class='hk'>=</> <span class='hf'>template</>(`() <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ groups have a dark-gray border</></><div>    <span class='hp'>!<</><span class='hg'>*group</><span class='hp'>></></><div><span class='hs'>        # This group has no title #</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*group</> <span class='ho'>title</><span class='hk'>=</><span class='hs'>\"Second group\"</><span class='hp'>></></><div><span class='hs'>        # This group has a #</> <span class='hp'>!<</><span class='hg'>b</><span class='hp'>></><span class='hs'> # title #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>b</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*group</> <span class='ho'>title</><span class='hk'>=</><span class='hs'>\"Parent group\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>*group</> <span class='ho'>title</><span class='hk'>=</><span class='hs'>\"Child group\"</><span class='hp'>></></><div><span class='hs'>            # Hello World #</></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>hr</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>group</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>title</><span class='hk'>:</><span class='hy'>string</> <span class='hk'>=</> <span class='hs'>\"\"</>, <span class='hv'>$content</><span class='hk'>:</><span class='ht'>IvContent</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"group\"</><span class='hp'>></> <span class='hc'>!/!/ groups have a dark-gray border</></><div>        <span class='hk'>if</> (<span class='hv'>title</>) {</><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"title\"</><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>title</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>        <span class='hp'>!<</><span class='hg'>!!</><span class='ho'> <span class='hd'>@</>content</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>sections</> <span class='hk'>=</> <span class='hf'>template</>(`() <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ sections have a blue border</></><div>    <span class='hp'>!<</><span class='hg'>*section</><span class='hp'>></></><div><span class='hs'>        # This section has no header & footer #</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*section</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.header</><span class='hp'>></><span class='hs'> # Hello #</> <span class='hp'>!<</><span class='hg'>b</><span class='hp'>></><span class='hs'> # World #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>b</><span class='hp'>></> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div><span class='hs'>        # This is important information... #</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*section</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.header</><span class='hp'>></><span class='hs'> # Another section #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>*group</><span class='hp'>></><span class='hs'> # The section content can contain any elements or sub-templates #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>i</><span class='hk'>=</><span class='hn'>1</>; <span class='hn'>4</><span class='hk'>></><span class='hv'>i</>; <span class='hv'>i</><span class='hk'>++</>) {</><div>            <span class='hc'>!/!/ of course, we can also use any control statement...</></><div>            <span class='hp'>!<</><span class='hg'>*group</><span class='hp'>></><span class='hs'> # content <span class='hn'>#</><span class='hd'>{</><span class='hv'>i</><span class='hd'>}</> ... #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>        <span class='hp'>!<</><span class='hg'>.footer</><span class='hp'>></><span class='hs'> #<span class='hn'>(</>and this is the footer placeholder)#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>section</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$content</><span class='hk'>:</><span class='ht'>IvContent</>, <span class='hv'>header</><span class='hk'>:</><span class='ht'>IvContent</>, <span class='hv'>footer</><span class='hk'>:</><span class='ht'>IvContent</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"section\"</><span class='hp'>></> <span class='hc'>!/!/ sections have a blue border</></><div>        <span class='hk'>if</> (<span class='hv'>header</>) {</><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"header\"</> <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>header</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>        <span class='hp'>!<</><span class='hg'>!!</><span class='ho'> <span class='hd'>@</>content</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hk'>if</> (<span class='hv'>footer</>) {</><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"footer\"</> <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>footer</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hf'>groups</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>();</><div><span class='hf'>sections</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>();</></></>"},{title:"event handlers",code:"events",content:"<div class='text'><h1> Event handlers </><*notions><.notion name='XJS decorators'> to implement specific logic on an XJS element </><.notion name='event handlers'> to trigger actions on DOM events </><.notion name='function expressions'> to pass a function as an expression value </><.notion name='event handlers options'> to pass to the DOM addEventListener() method </><.notion name='$ parameter'> to retrieve the object that holds all template parameters </></><p> Presentation... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>counter</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>count</><span class='hk'>=</><span class='hn'>42</>, <span class='hv'>$</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"counter\"</>  <span class='hd'>@</><span class='ho'>onkeydown</><span class='hk'>=</><span class='hd'>{</><span class='hv'>e</> <span class='hr'>=></> <span class='hf'>handleKey</>(<span class='hv'>e</>,<span class='hv'>$</>)<span class='hd'>}</> <span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>span</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"btn\"</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</>() <span class='hr'>=></> {<span class='hv'>$</>.<span class='hv'>count</><span class='hk'>--</>}<span class='hd'>}</><span class='hp'>></><span class='hs'> # - #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>span</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"val\"</> <span class='hd'>@</><span class='ho'>ondblclick</><span class='hk'>=</><span class='hd'>{</><span class='hv'>resetCounter</>.<span class='hf'>bind</>(<span class='hv'>$</>)<span class='hd'>}</> <span class='ho'>tabIndex</><span class='hk'>=</><span class='hn'>0</> <span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>count</><span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>span</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"btn\"</> </><div>            <span class='hd'>@</><span class='ho'>onclick</><span class='hd'>(</><span class='ho'>listener</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hv'>count</><span class='hk'>++</><span class='hd'>}</> <span class='ho'>options</><span class='hk'>=</><span class='hd'>{</>{capture:<span class='hn'>true</>}<span class='hd'>}</><span class='hd'>)</> </><div>        <span class='hp'>></><span class='hs'> # + #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>function</> <span class='hf'>handleKey</>(<span class='hv'>e</><span class='hk'>:</> <span class='ht'>KeyboardEvent</>, <span class='hv'>api</>) {</><div>    <span class='hr'>let</> <span class='hv'>v</> <span class='hk'>=</> parseInt(<span class='hv'>e</>.<span class='hv'>key</>, <span class='hn'>10</>);</><div>    <span class='hk'>if</> (<span class='hk'>!!</>isNaN(<span class='hv'>v</>)) {</><div>        <span class='hv'>api</>.<span class='hv'>count</> <span class='hk'>=</> <span class='hv'>v</>;</><div>    }</><div>}</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>function</> <span class='hf'>resetCounter</>(<span class='hv'>this</><span class='hk'>:</> <span class='hy'>any</>) {</><div>    <span class='hv'>this</>.<span class='hv'>count</> <span class='hk'>=</> <span class='hn'>0</>;</><div>}</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hf'>counter</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>();</><div><span class='hf'>counter</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({ count: <span class='hn'>18</> });</></></>"},{title:"dynamic references",code:"pages",content:"<div class='text'><h1> Dynamic template references </><*notions><.notion name='Using dynamic component references'> to implement some kind of visual navigation </></><p> Presentation... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>page</>, <span class='hv'>counter</><span class='hk'>=</><span class='hn'>1</>, <span class='hv'>$</>) <span class='hr'>=></> {</><div>    <span class='hk'>if</> (<span class='hk'>!!</><span class='hv'>page</>) {</><div>        <span class='hv'>page</> <span class='hk'>=</> <span class='hv'>$</>.<span class='hv'>page</> <span class='hk'>=</> <span class='hv'>pageA</>;</><div>    }</><div>    <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hv'>page</> <span class='hk'>=</> <span class='hv'>pageA</><span class='hd'>}</><span class='hp'>></><span class='hs'> # page A #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hv'>page</> <span class='hk'>=</> <span class='hv'>pageB</><span class='hd'>}</><span class='hp'>></><span class='hs'> # page B #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hv'>counter</><span class='hk'>++</><span class='hd'>}</><span class='hp'>></><span class='hs'> # + #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div> </><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"page container\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>*page</> <span class='ho'>count</><span class='hk'>=</><span class='hd'>{</><span class='hv'>counter</><span class='hk'>+</><span class='hn'>1</><span class='hd'>}</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>b</><span class='hp'>></><span class='hs'> # Page content #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # <span class='hn'>(</>main counter=<span class='hd'>{</><span class='hv'>counter</><span class='hd'>}</>) #</></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>();</></></><div class='text'><p> ... </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>pageA</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>count</><span class='hk'>:</><span class='hy'>number</>, <span class='hv'>$content</><span class='hk'>:</><span class='ht'>IvContent</>) <span class='hr'>=></> {</><div><span class='hs'>    # This is page A !/ count=<span class='hd'>{</><span class='hv'>count</><span class='hd'>}</> #</></><div>    <span class='hp'>!<</><span class='hg'>br</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>!!</><span class='ho'> <span class='hd'>@</>content</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hr'>const</> <span class='hv'>pageB</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>count</><span class='hk'>:</><span class='hy'>number</>, <span class='hv'>$content</><span class='hk'>:</><span class='ht'>IvContent</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"blue\"</><span class='hp'>></></><div><span class='hs'>        # This is page B (count=<span class='hd'>{</><span class='hv'>count</><span class='hd'>}</>) #</></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"container\"</> <span class='ho'><span class='hd'>@</>content</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></>"}]},{title:"reactivity",code:"reactivity",items:[{title:"trax data objects",code:"trax1",content:"<div class='text'><h1> Trax Data Objects </><*notions><.notion name='trax objects'> to define data objects that can be tracked!/watched </><.notion name='watch / unwatch'> to be asynchronously called when an object has changed </><.notion name='object version'> to follow a trax object life cycle </></><p> Presentation... </></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>User</> {</><div>    <span class='hv'>firstName</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>lastName</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>id</><span class='hk'>:</> <span class='hy'>number</>;</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hk'>import</> { <span class='hv'>Data</>, <span class='hv'>watch</>, <span class='hv'>unwatch</>, <span class='hv'>version</>, <span class='hv'>numberOfWatchers</> } <span class='hk'>from</> <span class='hs'>\"..!/..!/..!/trax\"</>;</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>user</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>User</>();</><div><span class='hv'>user</>.<span class='hv'>firstName</> <span class='hk'>=</> <span class='hs'>\"Marge\"</>;</><div><span class='hv'>user</>.<span class='hv'>lastName</> <span class='hk'>=</> <span class='hs'>\"Simpson\"</>;</><div><span class='hv'>user</>.<span class='hv'>id</> <span class='hk'>=</> <span class='hn'>1</>;</><div> </><div><span class='hf'>log</>(<span class='hs'>\"init complete (watch not activated)\"</>);</><div><span class='hf'>displayData</>();</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>count</> <span class='hk'>=</> <span class='hn'>0</>;</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"update\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ update user properties</></><div>    <span class='hv'>user</>.<span class='hv'>firstName</> <span class='hk'>+=</> <span class='hs'>\"+\"</> <span class='hk'>+</> (<span class='hk'>++</><span class='hv'>count</>);</><div>    <span class='hv'>user</>.<span class='hv'>id</><span class='hk'>++</>;</><div>});</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>wf</><span class='hk'>:</> <span class='hy'>any</> <span class='hk'>=</> <span class='hn'>null</>; <span class='hc'>!/!/ watch callback</></><div> </><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"watch\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ watch button</></><div>    <span class='hk'>if</> (<span class='hf'>numberOfWatchers</>(<span class='hv'>user</>) <span class='hk'>===</> <span class='hn'>0</>) {</><div>        <span class='hv'>wf</> <span class='hk'>=</> <span class='hf'>watch</>(<span class='hv'>user</>, () <span class='hr'>=></> {</><div>            <span class='hf'>log</>(<span class='hs'>\"user changed - version: \"</> <span class='hk'>+</> <span class='hf'>version</>(<span class='hv'>user</>));</><div>            <span class='hf'>displayData</>();</><div>        });</><div>        <span class='hf'>log</>(<span class='hs'>\"watch !<b>activated!<!/b>\"</>);</><div>    } <span class='hk'>else</> {</><div>        <span class='hf'>log</>(<span class='hs'>\"watch !<b>already activated!<!/b>\"</>);</><div>    }</><div>});</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"unwatch\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ unwatch button</></><div>    <span class='hf'>unwatch</>(<span class='hv'>user</>, <span class='hv'>wf</>);</><div>    <span class='hf'>log</>(<span class='hs'>\"watch !<b>deactivated!<!/b>\"</>);</><div>});</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"reload\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ reload button</></><div>    <span class='hv'>location</>.<span class='hf'>reload</>();</><div>});</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>logs</><span class='hk'>:</> <span class='hy'>string</>[];</><div><span class='hr'>function</> <span class='hf'>log</>(<span class='hv'>msg</><span class='hk'>:</> <span class='hy'>string</>) {</><div>    <span class='hv'>logs</> <span class='hk'>=</> <span class='hv'>logs</> <span class='hk'>||</> [];</><div>    <span class='hv'>logs</>.<span class='hf'>push</>(<span class='hv'>msg</>);</><div> </><div>    <span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"logs\"</>)<span class='hk'>!!</>.<span class='hv'>innerHTML</> <span class='hk'>=</> [</><div>        <span class='hs'>'!<b>logs:!<!/b> !<br!/>'</>, <span class='hv'>logs</>.<span class='hf'>join</>(<span class='hs'>'!<br!/>'</>)</><div>    ].<span class='hf'>join</>(<span class='hs'>''</>);</><div>}</><div><span class='hr'>function</> <span class='hf'>displayData</>() {</><div>    <span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"data\"</>)<span class='hk'>!!</>.<span class='hv'>innerHTML</> <span class='hk'>=</> [</><div>        <span class='hs'>'!<div class=\"user\"> !<b>user:!<!/b> '</>, </><div>        <span class='hv'>user</>.<span class='hv'>firstName</>, <span class='hs'>' !/ '</>, <span class='hv'>user</>.<span class='hv'>lastName</>, <span class='hs'>' !/ '</>, <span class='hv'>user</>.<span class='hv'>id</>, </><div>        <span class='hs'>'!<!/div>'</></><div>    ].<span class='hf'>join</>(<span class='hs'>''</>);</><div>}</></></>"},{title:"trax data graphs",code:"trax2",content:"<div class='text'><h1> Trax Directed Acyclic Graphs </><*notions><.notion name='connected trax objects'> to defined a DAG of data objects </><.notion name='change propagation'> to track changes in the child hierarchy </></><p> Presentation... </></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>User</> {</><div>    <span class='hv'>firstName</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>lastName</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>id</><span class='hk'>:</> <span class='hy'>number</>;</><div>}</><div> </><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>Group</> {</><div>    <span class='hv'>leader</><span class='hk'>:</> <span class='ht'>User</>;</><div>    <span class='hv'>name</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>members</><span class='hk'>:</> <span class='ht'>User</>[]; <span class='hc'>!/!/ sub-references will be tracked</></><div>    <span class='hv'>data</><span class='hk'>:</> <span class='hy'>any</>;       <span class='hc'>!/!/ only root reference will be tracked</></><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>user1</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>User</>();</><div><span class='hv'>user1</>.<span class='hv'>firstName</> <span class='hk'>=</> <span class='hs'>\"Marge\"</>;</><div><span class='hv'>user1</>.<span class='hv'>lastName</> <span class='hk'>=</> <span class='hs'>\"Simpson\"</>;</><div><span class='hv'>user1</>.<span class='hv'>id</> <span class='hk'>=</> <span class='hn'>1</>;</><div> </><div><span class='hr'>const</> <span class='hv'>user2</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>User</>();</><div><span class='hv'>user2</>.<span class='hv'>firstName</> <span class='hk'>=</> <span class='hs'>\"Homer\"</>;</><div><span class='hv'>user2</>.<span class='hv'>lastName</> <span class='hk'>=</> <span class='hs'>\"Simpson\"</>;</><div><span class='hv'>user2</>.<span class='hv'>id</> <span class='hk'>=</> <span class='hn'>1</>;</><div> </><div><span class='hr'>const</> <span class='hv'>g</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>Group</>();</><div><span class='hv'>g</>.<span class='hv'>name</> <span class='hk'>=</> <span class='hs'>\"The Simpsons\"</>;</><div><span class='hv'>g</>.<span class='hv'>leader</> <span class='hk'>=</> <span class='hv'>user1</>;</><div><span class='hv'>g</>.<span class='hv'>members</>[<span class='hn'>0</>] <span class='hk'>=</> <span class='hv'>user1</>;</><div><span class='hv'>g</>.<span class='hv'>members</>.<span class='hf'>push</>(<span class='hv'>user2</>);</><div><span class='hv'>g</>.<span class='hv'>data</> <span class='hk'>=</> {</><div>    value1: <span class='hs'>\"v1\"</>,</><div>    value2: <span class='hs'>\"v2\"</></><div>};</><div> </><div><span class='hf'>log</>(<span class='hs'>\"init complete (watch not activated)\"</>);</><div><span class='hf'>displayData</>();</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>wf</><span class='hk'>:</> <span class='hy'>any</> <span class='hk'>=</> <span class='hn'>null</>; <span class='hc'>!/!/ watch callback</></><div> </><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"watch\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hk'>if</> (<span class='hf'>numberOfWatchers</>(<span class='hv'>g</>) <span class='hk'>===</> <span class='hn'>0</>) {</><div>        <span class='hv'>wf</> <span class='hk'>=</> <span class='hf'>watch</>(<span class='hv'>g</>, () <span class='hr'>=></> {</><div>            <span class='hf'>log</>(<span class='hs'>`group changed - versions: </></><div><span class='hs'>                g=${<span class='hf'>version</>(<span class='hv'>g</>)} </></><div><span class='hs'>                user1=${<span class='hf'>version</>(<span class='hv'>user1</>)} </></><div><span class='hs'>                user2=${<span class='hf'>version</>(<span class='hv'>user2</>)}`</>);</><div>            <span class='hf'>displayData</>();</><div>        });</><div>        <span class='hf'>log</>(<span class='hs'>\"group watch !<b>activated!<!/b>\"</>);</><div>    } <span class='hk'>else</> {</><div>        <span class='hf'>log</>(<span class='hs'>\"group watch !<b>already activated!<!/b>\"</>);</><div>    }</><div>});</></></><*code indicators=''><div class='extract ts'><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"unwatch\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hf'>unwatch</>(<span class='hv'>g</>, <span class='hv'>wf</>);</><div>    <span class='hf'>log</>(<span class='hs'>\"group watch !<b>deactivated!<!/b>\"</>);</><div>});</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>count</> <span class='hk'>=</> <span class='hn'>0</>;</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"update1\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ user1 button</></><div>    <span class='hv'>user1</>.<span class='hv'>firstName</> <span class='hk'>+=</> <span class='hs'>\"+\"</> <span class='hk'>+</> <span class='hk'>++</><span class='hv'>count</>;</><div>});</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"update2\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ user2 button</></><div>    <span class='hv'>user2</>.<span class='hv'>firstName</> <span class='hk'>+=</> <span class='hs'>\"+\"</> <span class='hk'>+</> <span class='hk'>++</><span class='hv'>count</>;</><div>    <span class='hv'>user2</>.<span class='hv'>lastName</> <span class='hk'>+=</> <span class='hs'>\"+\"</> <span class='hk'>+</> <span class='hv'>count</>;</><div>});</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"update3\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ data button</></><div>    <span class='hc'>!/!/ update group data (will not trigger a watch callback call)</></><div>    <span class='hv'>g</>.<span class='hv'>data</>.<span class='hv'>value1</> <span class='hk'>+=</> <span class='hs'>\"+\"</> <span class='hk'>+</> <span class='hk'>++</><span class='hv'>count</>;</><div>});</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"add\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ add button</></><div>    <span class='hr'>let</> <span class='hv'>u</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>User</>();</><div>    <span class='hv'>u</>.<span class='hv'>firstName</> <span class='hk'>=</> <span class='hs'>\"Bart\"</> <span class='hk'>+</> <span class='hk'>++</><span class='hv'>count</>;</><div>    <span class='hv'>u</>.<span class='hv'>lastName</> <span class='hk'>=</> <span class='hs'>\"Simpson\"</>;</><div>    <span class='hv'>u</>.<span class='hv'>id</> <span class='hk'>=</> <span class='hv'>count</>;</><div>    <span class='hv'>g</>.<span class='hv'>members</>.<span class='hf'>push</>(<span class='hv'>u</>);</><div>});</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"remove\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ remove button</></><div>    <span class='hv'>g</>.<span class='hv'>members</>.<span class='hf'>splice</>(<span class='hn'>0</>, <span class='hn'>1</>); <span class='hc'>!/!/ remove the first element</></><div>});</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"new_data\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ replace data button</></><div>    <span class='hc'>!/!/ replace the group data with a new object -> will trigger a refresh</></><div>    <span class='hv'>g</>.<span class='hv'>data</> <span class='hk'>=</> {</><div>        value1: <span class='hs'>\"VAL1-\"</> <span class='hk'>+</> <span class='hk'>++</><span class='hv'>count</>,</><div>        value2: <span class='hs'>\"VAL2-\"</> <span class='hk'>+</> <span class='hv'>count</></><div>    }</><div>});</><div><span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"reload\"</>)<span class='hk'>!!</>.<span class='hf'>addEventListener</>(<span class='hs'>\"click\"</>, () <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ reload button</></><div>    <span class='hv'>location</>.<span class='hf'>reload</>();</><div>});</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>logs</><span class='hk'>:</> <span class='hy'>string</>[];</><div><span class='hr'>function</> <span class='hf'>log</>(<span class='hv'>msg</><span class='hk'>:</> <span class='hy'>string</>) {</><div>    <span class='hv'>logs</> <span class='hk'>=</> <span class='hv'>logs</> <span class='hk'>||</> [];</><div>    <span class='hv'>logs</>.<span class='hf'>push</>(<span class='hv'>msg</>);</><div> </><div>    <span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"logs\"</>)<span class='hk'>!!</>.<span class='hv'>innerHTML</> <span class='hk'>=</> [</><div>        <span class='hs'>'!<b>logs:!<!/b> !<br!/>'</>, <span class='hv'>logs</>.<span class='hf'>join</>(<span class='hs'>'!<br!/>'</>)</><div>    ].<span class='hf'>join</>(<span class='hs'>''</>);</><div>}</><div><span class='hr'>function</> <span class='hf'>displayData</>() {</><div>    <span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"data\"</>)<span class='hk'>!!</>.<span class='hv'>innerHTML</> <span class='hk'>=</> [</><div>        <span class='hs'>'!<div class=\"group\">'</>,</><div>        <span class='hs'>'!<div>!<b>name:!<!/b> '</>, <span class='hv'>g</>.<span class='hv'>name</>, <span class='hs'>'!<!/div>'</>,</><div>        <span class='hs'>'!<div>!<b>leader:!<!/b> '</>, <span class='hv'>g</>.<span class='hv'>leader</>.<span class='hv'>firstName</>, <span class='hs'>' !/ '</>, <span class='hv'>g</>.<span class='hv'>leader</>.<span class='hv'>lastName</>, <span class='hs'>'!<!/div>'</>,</><div>        <span class='hs'>'!<div>!<b>number of members:!<!/b> '</>, <span class='hv'>g</>.<span class='hv'>members</>.length, <span class='hs'>'!<!/div>'</>,</><div>        <span class='hs'>'!<div>!<b>members:!<!/b>!<!/div>'</>,</><div>        <span class='hv'>g</>.<span class='hv'>members</>.<span class='hf'>map</>((<span class='hv'>m</>, <span class='hv'>idx</>) <span class='hr'>=></> <span class='hs'>`</></><div><span class='hs'>            !<div class=\"member\"> </></><div><span class='hs'>            ${<span class='hv'>idx</> <span class='hk'>+</> <span class='hn'>1</>}. ${<span class='hv'>m</>.<span class='hv'>firstName</>} !/ ${<span class='hv'>m</>.<span class='hv'>lastName</>}</></><div><span class='hs'>            !<!/div>`</>).<span class='hf'>join</>(<span class='hs'>''</>),</><div>        <span class='hs'>'!<div>!<b>data:!<!/b> '</>, JSON.stringify(<span class='hv'>g</>.<span class='hv'>data</>), <span class='hs'>'!<!/div>'</>,</><div>        <span class='hs'>'!<!/div>'</></><div>    ].<span class='hf'>join</>(<span class='hs'>''</>);</><div>}</></></>"},{title:"multi-content templates",code:"menu1",content:"<div class='text'><h1> Multi-content templates </><*notions><.notion name='explicit API type'> to define the template api as a trax object </><.notion name='@API decorator'> to specify API (trax) classes </><.notion name='param nodes'> to specify rich hierarchy of content parameters </></><p> [...] </></><*code><div class='extract ts'><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>MainApi</> {</><div>    <span class='hc'>!/!/ @API is a specialized version of @Data</></><div>    <span class='hv'>extraLength</> <span class='hk'>=</> <span class='hn'>3</>;</><div>}</><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>MainApi</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"commands\"</><span class='hp'>></></><div><span class='hs'>        # Number of extras: #</></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hv'>extraLength</><span class='hk'>++</><span class='hd'>}</><span class='hp'>></><span class='hs'> # + #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hv'>extraLength</><span class='hk'>--</><span class='hd'>}</><span class='hp'>></><span class='hs'> # - #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*menu</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.header</> <span class='ho'>title</><span class='hk'>=</><span class='hs'>\"Preferred options:\"</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"A\"</><span class='hp'>></><span class='hs'> # Value A #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"C\"</><span class='hp'>></><span class='hs'> # Value C #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"A\"</><span class='hp'>></><span class='hs'> # Value A #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"B\"</><span class='hp'>></><span class='hs'> # Value B #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"C\"</><span class='hp'>></><span class='hs'> # Value C #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>i</><span class='hk'>=</><span class='hn'>0</>; <span class='hv'>$</>.<span class='hv'>extraLength</><span class='hk'>></><span class='hv'>i</>; <span class='hv'>i</><span class='hk'>++</>) {</><div>            <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"X\"</><span class='hk'>+</><span class='hv'>i</><span class='hd'>}</><span class='hp'>></><span class='hs'> # Extra <span class='hn'>#</><span class='hd'>{</><span class='hv'>i</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>menu</>);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"output\"</>)).<span class='hf'>render</>();</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>MenuOption</> {</><div>    <span class='hv'>id</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>$content</><span class='hk'>:</> <span class='ht'>IvContent</>;</><div>}</><div> </><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>MenuHeader</> {</><div>    <span class='hv'>title</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>optionList</><span class='hk'>:</> <span class='ht'>MenuOption</>[];</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>menu</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>header</><span class='hk'>:</><span class='ht'>MenuHeader</>, <span class='hv'>optionList</><span class='hk'>:</> <span class='ht'>MenuOption</>[]) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"menu\"</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hv'>e</><span class='hr'>=></><span class='hf'>handleEvent</>(<span class='hv'>e</>.<span class='hv'>target</>)<span class='hd'>}</><span class='hp'>></></><div>        <span class='hk'>if</> (<span class='hv'>header</> <span class='hk'>&&</> <span class='hv'>header</>.<span class='hv'>title</>) {</><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"title\"</><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>header</>.<span class='hv'>title</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hk'>if</> (<span class='hv'>header</>.<span class='hv'>optionList</>.length) {</><div>                <span class='hc'>!/!/ header list</></><div>                <span class='hp'>!<</><span class='hg'>ul</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"header list\"</><span class='hp'>></></><div>                    <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>option</> <span class='hk'>of</> <span class='hv'>header</>.<span class='hv'>optionList</>) {</><div>                        <span class='hp'>!<</><span class='hg'>li</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"option\"</> </><div>                            <span class='ho'>data-code</><span class='hk'>=</><span class='hd'>{</><span class='hv'>option</>.<span class='hv'>id</><span class='hd'>}</> </><div>                            <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>option</>.<span class='hv'>$content</><span class='hd'>}</></><div>                        <span class='hp'>!/</><span class='hp'>></></><div>                    }</><div>                <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            }</><div>        }</><div>        <span class='hc'>!/!/ main list</></><div>        <span class='hp'>!<</><span class='hg'>ul</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"main list\"</><span class='hp'>></></><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>option</> <span class='hk'>of</> <span class='hv'>optionList</>) {</><div>                <span class='hp'>!<</><span class='hg'>li</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"option\"</> <span class='ho'>data-code</><span class='hk'>=</><span class='hd'>{</><span class='hv'>option</>.<span class='hv'>id</><span class='hd'>}</> <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>option</>.<span class='hv'>$content</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>            }</><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>handleEvent</>, <span class='hv'>MenuOption</>, <span class='hv'>MenuHeader</>);</><div> </><div><span class='hr'>function</> <span class='hf'>handleEvent</>(<span class='hv'>target</>) {</><div>    <span class='hc'>!/!/ we should raise an event here (cf. next example)</></><div>    <span class='hk'>if</> (<span class='hv'>target</> <span class='hk'>&&</> <span class='hv'>target</>.<span class='hv'>dataset</>) {</><div>        <span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"logs\"</>)<span class='hk'>!!</>.<span class='hv'>innerHTML</> <span class='hk'>=</></><div>            <span class='hs'>`You clicked on menu item ${<span class='hv'>target</>.<span class='hv'>dataset</>.<span class='hv'>code</>}`</>;</><div>    }</><div>}</></></>"},{title:"custom events",code:"menu2",content:"<div class='text'><h1> Custom events </><*notions><.notion name='IvEventEmitter'> to define custom events that can be caught through standard @onXXX decorators </></><p> ... </></><*code><div class='extract ts'><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>Main</> {</><div>    <span class='hv'>extraLength</> <span class='hk'>=</> <span class='hn'>3</>;</><div>    <span class='hv'>message</> <span class='hk'>=</> <span class='hs'>\"\"</>;</><div>}</><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>Main</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"commands\"</><span class='hp'>></></><div><span class='hs'>        # Number of extras: #</></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hv'>extraLength</><span class='hk'>++</><span class='hd'>}</><span class='hp'>></><span class='hs'> # + #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hv'>extraLength</><span class='hk'>--</><span class='hd'>}</><span class='hp'>></><span class='hs'> # - #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*menu</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hv'>e</> <span class='hr'>=></> <span class='hv'>$</>.<span class='hv'>message</><span class='hk'>=</><span class='hs'>\"You clicked on item \"</><span class='hk'>+</><span class='hv'>e</>.<span class='hv'>data</><span class='hd'>}</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"A\"</><span class='hp'>></><span class='hs'> # Value A #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"B\"</><span class='hp'>></><span class='hs'> # Value B #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"C\"</><span class='hp'>></><span class='hs'> # Value C #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>i</><span class='hk'>=</><span class='hn'>0</>;<span class='hv'>$</>.<span class='hv'>extraLength</><span class='hk'>></><span class='hv'>i</>;<span class='hv'>i</><span class='hk'>++</>) {</><div>            <span class='hp'>!<</><span class='hg'>.option</> <span class='ho'>id</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"X\"</><span class='hk'>+</><span class='hv'>i</><span class='hd'>}</><span class='hp'>></><span class='hs'> # Extra <span class='hn'>#</><span class='hd'>{</><span class='hv'>i</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"logs\"</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>$</>.<span class='hv'>message</><span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>menu</>);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"output\"</>)).<span class='hf'>render</>();</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>MenuOption</> {</><div>    <span class='hv'>id</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>$content</><span class='hk'>:</> <span class='ht'>IvContent</>;</><div>}</><div> </><div><span class='hr'>const</> <span class='hv'>menu</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>optionList</><span class='hk'>:</> <span class='ht'>MenuOption</>[], <span class='hv'>clickEmitter</><span class='hk'>:</><span class='ht'>IvEventEmitter</>, <span class='hv'>$</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"menu\"</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hv'>e</><span class='hr'>=></><span class='hf'>raiseEvent</>(<span class='hv'>$</>, <span class='hv'>e</>.<span class='hv'>target</>)<span class='hd'>}</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>ul</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"main list\"</><span class='hp'>></></><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>option</> <span class='hk'>of</> <span class='hv'>optionList</>) {</><div>                <span class='hp'>!<</><span class='hg'>li</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"option\"</> <span class='ho'>data-code</><span class='hk'>=</><span class='hd'>{</><span class='hv'>option</>.<span class='hv'>id</><span class='hd'>}</> <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>option</>.<span class='hv'>$content</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>            }</><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>MenuOption</>, <span class='hv'>IvEventEmitter</>, <span class='hv'>raiseEvent</>);</><div> </><div><span class='hr'>function</> <span class='hf'>raiseEvent</>(<span class='hv'>api</>, <span class='hv'>target</>) {</><div>    <span class='hk'>if</> (<span class='hv'>target</> <span class='hk'>&&</> <span class='hv'>target</>.<span class='hv'>dataset</>) {</><div>        <span class='hv'>api</>.<span class='hv'>clickEmitter</>.<span class='hf'>emit</>(<span class='hv'>target</>.<span class='hv'>dataset</>.<span class='hv'>code</>);</><div>    }</><div>}</></></>"}]},{title:"components",code:"components",items:[{title:"controllers & APIs",code:"controller1",content:"<div class='text'><h1> Template controllers & APIs </><*notions><.notion name='@Controller'> to define private state and methods associated to a template </><.notion name='$api property'> to define the public api associated to a controller </></> ... </><*code><div class='extract ts'><div><span class='hc'>!/!/ example adapted from https:!/!/svelte.dev!/examples#component-bindings</></><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>message</><span class='hk'>=</><span class='hs'>\"\"</>, <span class='hv'>$</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>*keypad</> <span class='ho'>placeholder</><span class='hk'>=</><span class='hs'>\"enter your pin\"</> </><div>        <span class='hd'>@</><span class='ho'>onsubmit</><span class='hk'>=</><span class='hd'>{</><span class='hv'>e</><span class='hr'>=></><span class='hv'>$</>.<span class='hv'>message</><span class='hk'>=</><span class='hs'>\"Last submission: \"</><span class='hk'>+</><span class='hv'>e</>.<span class='hv'>data</><span class='hd'>}</></><div>    <span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"logs\"</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>message</><span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>keypad</>);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>();</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>Keypad</> {</><div>    <span class='hv'>placeholder</><span class='hk'>:</> <span class='hy'>string</>;            <span class='hc'>!/!/ e.g. !<*keypad placeholder=\"enter your pin\"!/></></><div>    <span class='hv'>submitEmitter</><span class='hk'>:</> <span class='ht'>IvEventEmitter</>;  <span class='hc'>!/!/ e.g. !<*keypad @onsubmit={evt=>foo(evt.data)}</></><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>Controller</> <span class='hr'>class</> <span class='ht'>KeypadCtl</> {</><div>    <span class='hv'>$api</><span class='hk'>:</> <span class='ht'>Keypad</>;    <span class='hc'>!/!/ public api</></><div>    <span class='hv'>value</><span class='hk'>:</> <span class='hy'>string</> <span class='hk'>=</> <span class='hs'>\"\"</>; <span class='hc'>!/!/ private state</></><div> </><div>    <span class='hf'>select</>(<span class='hv'>n</><span class='hk'>:</> <span class='hy'>number</>) {</><div>        <span class='hc'>!/!/ called when a number button is pressed</></><div>        <span class='hv'>this</>.<span class='hv'>value</> <span class='hk'>+=</> <span class='hv'>n</>;</><div>    }</><div>    <span class='hf'>clear</>() {</><div>        <span class='hc'>!/!/ called when the clear button is pressed</></><div>        <span class='hv'>this</>.<span class='hv'>value</> <span class='hk'>=</> <span class='hs'>\"\"</>;</><div>    }</><div>    <span class='hf'>submit</>() {</><div>        <span class='hc'>!/!/ called when the submit button is pressed</></><div>        <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>submitEmitter</>.<span class='hf'>emit</>(<span class='hv'>this</>.<span class='hv'>value</>);</><div>    }</><div>    <span class='hf'>viewValue</>() {</><div>        <span class='hc'>!/!/ return the text that will be displayed above the keypad</></><div>        <span class='hk'>return</> <span class='hv'>this</>.<span class='hv'>value</> <span class='hk'>?</> <span class='hv'>this</>.<span class='hv'>value</>.<span class='hf'>replace</>(<span class='hs'>!/<span class='hn'>d</>(?!!<span class='hk'>$</>)!/<span class='hk'>g</></>, <span class='hs'>'•'</>) <span class='hk'>:</> <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>placeholder</>;</><div>    }</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hk'>export</> <span class='hr'>const</> <span class='hv'>keypad</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>KeypadCtl</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"keypad\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"pin\"</> <span class='ho'>style</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"color:\"</> <span class='hk'>+</> (<span class='hv'>$</>.<span class='hv'>value</> <span class='hk'>?</> <span class='hs'>'#333'</> <span class='hk'>:</> <span class='hs'>'#ccc'</>)<span class='hd'>}</><span class='hp'>></> </><div><span class='hs'>            #<span class='hd'>{</><span class='hv'>$</>.<span class='hf'>viewValue</>()<span class='hd'>}</>#</> </><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"pad\"</><span class='hp'>></></><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>i</><span class='hk'>=</><span class='hn'>1</>;<span class='hn'>10</><span class='hk'>></><span class='hv'>i</>;<span class='hv'>i</><span class='hk'>++</>) {</><div>                <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>select</>(<span class='hv'>i</>)<span class='hd'>}</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>i</><span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            }</><div>            <span class='hp'>!<</><span class='hg'>button</> <span class='ho'>disabled</><span class='hk'>=</><span class='hd'>{</><span class='hv'>$</>.<span class='hv'>value</><span class='hk'>?</> <span class='hn'>undefined</> <span class='hk'>:</> <span class='hn'>true</><span class='hd'>}</> </><div>                <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>clear</>()<span class='hd'>}</></><div>            <span class='hp'>></><span class='hs'> #clear#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>select</>(<span class='hn'>0</>)<span class='hd'>}</><span class='hp'>></><span class='hs'> #0#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>button</> <span class='ho'>disabled</><span class='hk'>=</><span class='hd'>{</><span class='hv'>$</>.<span class='hv'>value</><span class='hk'>?</> <span class='hn'>undefined</> <span class='hk'>:</> <span class='hn'>true</><span class='hd'>}</> </><div>                <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>submit</>()<span class='hd'>}</></><div>            <span class='hp'>></><span class='hs'> #submit#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>KeypadCtl</>);</></></><div class='text'><p> Some comment </></>"},{title:"2-way binding params",code:"controller2",content:"<div class='text'><h1> I!/O params </><*notions><.notion name='@io params'> to define params that are both input and output </><.notion name='2-way biding expressions'> e.g. {=x.y} </><.notion name='setting or removing attributes'> e.g. to enable or disable an input or button </></> ... </><*code><div class='extract ts'><div><span class='hc'>!/!/ example adapted from https:!/!/svelte.dev!/examples#component-bindings</></><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>pin</><span class='hk'>=</><span class='hs'>\"\"</>, <span class='hv'>message</><span class='hk'>=</><span class='hs'>\"\"</>, <span class='hv'>$</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>*keypad</> <span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$</>.<span class='hv'>pin</><span class='hd'>}</></><div>        <span class='hd'>@</><span class='ho'>onsubmit</><span class='hk'>=</><span class='hd'>{</><span class='hv'>e</><span class='hr'>=></><span class='hv'>$</>.<span class='hv'>message</><span class='hk'>=</><span class='hs'>\"Last submission: \"</><span class='hk'>+</><span class='hv'>e</>.<span class='hv'>data</><span class='hd'>}</></><div>    <span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"pin\"</><span class='hp'>></> </><div><span class='hs'>        # Keypad value: <span class='hd'>{</><span class='hv'>pin</><span class='hk'>?</> <span class='hv'>pin</> <span class='hk'>:</> \"[empty]\"<span class='hd'>}</>#</> </><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>div</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"logs\"</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>message</><span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({pin:<span class='hs'>\"1234\"</>});</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>Keypad</> {</><div>    @<span class='hv'>io</> <span class='hv'>value</><span class='hk'>:</><span class='hy'>string</>;               <span class='hc'>!/!/ e.g. !<*keypad value={=foo.bar}!/></></><div>    <span class='hv'>submitEmitter</><span class='hk'>:</> <span class='ht'>IvEventEmitter</>;  <span class='hc'>!/!/ e.g. !<*keypad @onsubmit={evt=>foo(evt.data)}</></><div>}</><div> </><div>@<span class='hv'>Controller</> <span class='hr'>class</> <span class='ht'>KeypadCtl</> {</><div>    <span class='hv'>$api</><span class='hk'>:</> <span class='ht'>Keypad</>;       <span class='hc'>!/!/ public api</></><div> </><div>    <span class='hf'>select</>(<span class='hv'>n</><span class='hk'>:</> <span class='hy'>number</>) {</><div>        <span class='hc'>!/!/ called when a number button is pressed</></><div>        <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>value</> <span class='hk'>+=</> <span class='hv'>n</>;</><div>    }</><div>    <span class='hf'>clear</>() {</><div>        <span class='hc'>!/!/ called when the clear button is pressed</></><div>        <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>value</> <span class='hk'>=</> <span class='hs'>\"\"</>;</><div>    }</><div>    <span class='hf'>submit</>() {</><div>        <span class='hc'>!/!/ called when the submit button is pressed</></><div>        <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>submitEmitter</>.<span class='hf'>emit</>(<span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>value</>);</><div>    }</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hk'>export</> <span class='hr'>const</> <span class='hv'>keypad</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>KeypadCtl</>, <span class='hv'>$api</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"keypad\"</><span class='hp'>></></><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>i</><span class='hk'>=</><span class='hn'>1</>;<span class='hn'>10</><span class='hk'>></><span class='hv'>i</>;<span class='hv'>i</><span class='hk'>++</>) {</><div>            <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>select</>(<span class='hv'>i</>)<span class='hd'>}</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>i</><span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='ho'>disabled</><span class='hk'>=</><span class='hd'>{</><span class='hv'>$api</>.<span class='hv'>value</><span class='hk'>?</> <span class='hn'>undefined</> <span class='hk'>:</> <span class='hn'>true</><span class='hd'>}</> </><div>            <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>clear</>()<span class='hd'>}</></><div>        <span class='hp'>></><span class='hs'> #clear#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>select</>(<span class='hn'>0</>)<span class='hd'>}</><span class='hp'>></><span class='hs'> #0#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='ho'>disabled</><span class='hk'>=</><span class='hd'>{</><span class='hv'>$api</>.<span class='hv'>value</><span class='hk'>?</> <span class='hn'>undefined</> <span class='hk'>:</> <span class='hn'>true</><span class='hd'>}</> </><div>            <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>submit</>()<span class='hd'>}</></><div>        <span class='hp'>></><span class='hs'> #submit#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>KeypadCtl</>);</></></><div class='text'><p> Some comment </></>"},{title:"life-cycle hooks",code:"photos",content:"<div class='text'><h1> Life-cycle hooks </><*notions><.notion name='life-cycle hooks'> to define specific hooks on the template controller </><.notion name='$init hook'> to perform some initialization when all parameters are defined </></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`() <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>*photos</> <span class='ho'>url</><span class='hk'>=</><span class='hs'>\"https:!/!/jsonplaceholder.typicode.com!/photos?_limit=4\"</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>();</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hc'>!/!/ example adapted from https:!/!/svelte.dev!/examples#onmount</></><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>Photos</> {</><div>    <span class='hv'>url</><span class='hk'>:</> <span class='hy'>string</>; <span class='hc'>!/!/ e.g. !<*photos url=\"https:!/!/foo.com!/photos?_limit=20\"!/></></><div>}</><div> </><div>@<span class='hv'>Controller</> <span class='hr'>class</> <span class='ht'>PhotosCtl</> {</><div>    <span class='hv'>$api</><span class='hk'>:</> <span class='ht'>Photos</>;</><div>    <span class='hv'>photos</><span class='hk'>?</><span class='hk'>:</> <span class='hy'>any</>[]; <span class='hc'>!/!/ interface types not supported yet</></><div> </><div>    <span class='hr'>async</> <span class='hf'>$init</>() {</><div>        <span class='hc'>!/!/ $api is initialized before $init is called</></><div>        <span class='hk'>await</> <span class='hf'>delay</>(<span class='hn'>500</>); <span class='hc'>!/!/ slow-down the process to see the loading indicator</></><div>        <span class='hr'>const</> <span class='hv'>res</> <span class='hk'>=</> <span class='hk'>await</> <span class='hf'>fetch</>(<span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>url</>);</><div>        <span class='hv'>this</>.<span class='hv'>photos</> <span class='hk'>=</> <span class='hk'>await</> <span class='hv'>res</>.<span class='hf'>json</>();</><div>    }</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>photos</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>PhotosCtl</>) <span class='hr'>=></> {</><div>    <span class='hr'>const</> <span class='hv'>photos</> <span class='hk'>=</> <span class='hv'>$</>.<span class='hv'>photos</>;</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"photos\"</><span class='hp'>></></><div>        <span class='hk'>if</> (<span class='hv'>photos</> <span class='hk'>===</> <span class='hn'>undefined</>) {</><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"loading\"</><span class='hp'>></><span class='hs'> # loading... #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        } <span class='hk'>elseif</>  (<span class='hv'>photos</>.length <span class='hk'>===</> <span class='hn'>0</>) {</><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"no_results\"</><span class='hp'>></><span class='hs'> # no photos #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        } <span class='hk'>else</> {</><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>photo</> <span class='hk'>of</> <span class='hv'>photos</>) {</><div>                <span class='hp'>!<</><span class='hg'>figure</><span class='hp'>></></><div>                    <span class='hp'>!<</><span class='hg'>img</> <span class='ho'>src</><span class='hk'>=</><span class='hd'>{</><span class='hv'>photo</>.<span class='hv'>thumbnailUrl</><span class='hd'>}</> <span class='ho'>alt</><span class='hk'>=</><span class='hd'>{</><span class='hv'>photo</>.<span class='hv'>title</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>                    <span class='hp'>!<</><span class='hg'>figcaption</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>photo</>.<span class='hv'>title</><span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>                <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            }</><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> Some comment </></>"},{title:"parameter nodes",code:"tabs",content:"<div class='text'><h1> Parameter nodes lazy loading </><*notions><.notion name='content lazy loading'> to avoid heavy processing in unused $content and parameter nodes </><.notion name='$beforeRender & $afterRender hooks'> to perform some processing before !/ after render </></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>tabSelection</><span class='hk'>:</><span class='hy'>string</>, <span class='hv'>$</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"info\"</><span class='hp'>></></><div><span class='hs'>        # Tab Selection: <span class='hd'>{</><span class='hv'>tabSelection</><span class='hd'>}</> #</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*tabs</> <span class='ho'>selection</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$</>.<span class='hv'>tabSelection</><span class='hd'>}</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.tab</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"tabA\"</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>.title</><span class='hp'>></><span class='hs'> # tab title #</> <span class='hp'>!<</><span class='hg'>b</><span class='hp'>></><span class='hs'> # A #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></><span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>*heavyComponent</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"cptA\"</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.tab</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"tabB\"</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>.title</><span class='hp'>></><span class='hs'> # tab title #</> <span class='hp'>!<</><span class='hg'>b</><span class='hp'>></><span class='hs'> # B #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></><span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>*heavyComponent</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"cptB\"</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.tab</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"tabC\"</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>.title</><span class='hp'>></><span class='hs'> # tab title #</> <span class='hp'>!<</><span class='hg'>b</><span class='hp'>></><span class='hs'> # C #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></><span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>*heavyComponent</> <span class='ho'>id</><span class='hk'>=</><span class='hs'>\"cptC\"</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>tabs</>);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"output\"</>)).<span class='hf'>render</>();</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>HeavyComponent</> {</><div>    <span class='hv'>id</><span class='hk'>:</> <span class='hy'>string</>;</><div>}</><div> </><div>@<span class='hv'>Controller</> <span class='hr'>class</> <span class='ht'>HeavyCptCtrl</> {</><div>    <span class='hv'>$api</><span class='hk'>:</> <span class='ht'>HeavyComponent</>;</><div>    <span class='hf'>$init</>() {</><div>        <span class='hf'>log</>(<span class='hs'>\"!<div class='init'>init: heavyComponent \"</> <span class='hk'>+</> <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>id</> <span class='hk'>+</> <span class='hs'>\"!<!/div>\"</>);</><div>    }</><div>    <span class='hf'>$beforeRender</>() {</><div>        <span class='hf'>log</>(<span class='hs'>\"beforeRender: heavyComponent \"</> <span class='hk'>+</> <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>id</>);</><div>    }</><div>    <span class='hf'>$afterRender</>() {</><div>        <span class='hf'>log</>(<span class='hs'>\"afterRender: heavyComponent \"</> <span class='hk'>+</> <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>id</>);</><div>    }</><div>}</><div> </><div><span class='hr'>const</> <span class='hv'>heavyComponent</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>HeavyCptCtrl</>) <span class='hr'>=></> {</><div>    <span class='hf'>log</>(<span class='hs'>\"render: heavyComponent \"</> <span class='hk'>+</> <span class='hv'>$</>.<span class='hv'>$api</>.<span class='hv'>id</>);</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"heavy\"</><span class='hp'>></></><div><span class='hs'>        # heavy component '<span class='hd'>{</><span class='hv'>$</>.<span class='hv'>$api</>.<span class='hv'>id</><span class='hd'>}</>'#</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hc'>!/!/ simple logger</></><div><span class='hr'>let</> <span class='hv'>logs</> <span class='hk'>=</> <span class='hs'>\"!<div> Logs: !<!/div>\"</>;</><div><span class='hr'>function</> <span class='hf'>log</>(<span class='hv'>msg</><span class='hk'>:</> <span class='hy'>string</>) {</><div>    <span class='hv'>logs</> <span class='hk'>+=</> <span class='hs'>'!<div>'</> <span class='hk'>+</> <span class='hv'>msg</> <span class='hk'>+</> <span class='hs'>'!<!/div>'</>;</><div>    <span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"logs\"</>)<span class='hk'>!!</>.<span class='hv'>innerHTML</> <span class='hk'>=</> <span class='hv'>logs</>;</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>Tab</> {</><div>    <span class='hv'>id</><span class='hk'>:</> <span class='hy'>string</>;</><div>    <span class='hv'>title</><span class='hk'>:</> <span class='ht'>IvContent</>;</><div>    <span class='hv'>$content</><span class='hk'>:</> <span class='ht'>IvContent</>;</><div>}</><div> </><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>Tabs</> {</><div>    @<span class='hv'>io</> <span class='hv'>selection</><span class='hk'>:</> <span class='hy'>string</>;    <span class='hc'>!/!/ id of the selected tab</></><div>    <span class='hv'>tabList</><span class='hk'>:</> <span class='ht'>Tab</>[];</><div>}</><div> </><div>@<span class='hv'>Controller</> <span class='hr'>class</> <span class='ht'>TabsCtl</> {</><div>    <span class='hv'>$api</><span class='hk'>:</> <span class='ht'>Tabs</>;</><div> </><div>    <span class='hf'>$beforeRender</>() {</><div>        <span class='hc'>!/!/ make sure $api.selection corresponds to a valid tab</></><div>        <span class='hr'>const</> <span class='hv'>tabs</> <span class='hk'>=</> <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>tabList</>;</><div>        <span class='hk'>if</> (<span class='hv'>tabs</>.length <span class='hk'>></> <span class='hn'>0</>) {</><div>            <span class='hr'>let</> <span class='hv'>found</> <span class='hk'>=</> <span class='hn'>false</>;</><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>tab</> <span class='hk'>of</> <span class='hv'>tabs</>) {</><div>                <span class='hk'>if</> (<span class='hv'>tab</>.<span class='hv'>id</> <span class='hk'>===</> <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>selection</>) {</><div>                    <span class='hv'>found</> <span class='hk'>=</> <span class='hn'>true</>;</><div>                    <span class='hk'>break</>;</><div>                }</><div>            }</><div>            <span class='hk'>if</> (<span class='hk'>!!</><span class='hv'>found</>) {</><div>                <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hv'>selection</> <span class='hk'>=</> <span class='hv'>tabs</>[<span class='hn'>0</>].<span class='hv'>id</>;</><div>            }</><div>        }</><div>    }</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hk'>export</> <span class='hr'>const</> <span class='hv'>tabs</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>TabsCtl</>, <span class='hv'>$api</>) <span class='hr'>=></> {</><div>    <span class='hr'>let</> <span class='hv'>api</> <span class='hk'>=</> <span class='hv'>$</>.<span class='hv'>$api</>;</><div>    <span class='hr'>const</> <span class='hv'>tabs</> <span class='hk'>=</> <span class='hv'>api</>.<span class='hv'>tabList</>, <span class='hv'>selectedId</><span class='hk'>=</><span class='hs'>\"\"</>;</><div>    <span class='hr'>let</> <span class='hv'>selectedContent</><span class='hk'>=</><span class='hn'>null</>, <span class='hv'>isSelected</><span class='hk'>=</><span class='hn'>false</>;</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"tabs\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>ul</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"header\"</><span class='hp'>></></><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>tab</> <span class='hk'>of</> <span class='hv'>tabs</>) {</><div>                <span class='hv'>isSelected</> <span class='hk'>=</> <span class='hv'>api</>.<span class='hv'>selection</> <span class='hk'>===</> <span class='hv'>tab</>.<span class='hv'>id</>;</><div>                <span class='hp'>!<</><span class='hg'>li</> <span class='ho'>class</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"tab \"</> <span class='hk'>+</> (<span class='hv'>isSelected</><span class='hk'>?</> <span class='hs'>\"selected\"</> <span class='hk'>:</> <span class='hs'>\"\"</>)<span class='hd'>}</> </><div>                    <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></> <span class='hv'>api</>.<span class='hv'>selection</> <span class='hk'>=</> <span class='hv'>tab</>.<span class='hv'>id</><span class='hd'>}</></><div>                    <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>tab</>.<span class='hv'>title</><span class='hd'>}</></><div>                <span class='hp'>!/</><span class='hp'>></></><div>                <span class='hk'>if</> (<span class='hv'>isSelected</>) {</><div>                    <span class='hv'>selectedContent</> <span class='hk'>=</> <span class='hv'>tab</>.<span class='hv'>$content</>;</><div>                }</><div>            }</><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"content\"</> <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>selectedContent</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></>"},{title:"labels",code:"labels1",content:"<div class='text'><h1> Labels </><*notions><.notion name='#labels'> as a mean to get a reference to dom elements </><.notion name='query() method'> to retrieve template elements that have been rendered </></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>title</><span class='hk'>:</><span class='hy'>string</>, <span class='hv'>nameList</><span class='hk'>:</><span class='hy'>string</>[]) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"commands\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</> <span class='hk'>=</> <span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Click on a button to focus one of elements below #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hv'>focusTitle</><span class='hd'>}</><span class='hp'>></><span class='hs'> # title #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hv'>focus3rd</><span class='hd'>}</><span class='hp'>></><span class='hs'> # 3rd item #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hv'>focusNext</><span class='hd'>}</><span class='hp'>></><span class='hs'> # next item #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>h1</><span class='ho'> <span class='hd'>#</>title</> <span class='ho'>tabindex</><span class='hk'>=</><span class='hn'>0</><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>title</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>h1</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>ul</><span class='hp'>></></><div>        <span class='hr'>let</> <span class='hv'>count</><span class='hk'>=</><span class='hn'>0</>;</><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>name</> <span class='hk'>of</> <span class='hv'>nameList</>) {</><div>            <span class='hv'>count</><span class='hk'>++</>;</><div>            <span class='hp'>!<</><span class='hg'>li</><span class='ho'> <span class='hd'>#</>item <span class='hd'>#</>third<span class='hk'>=</><span class='hd'>{</><span class='hv'>count</><span class='hk'>===</><span class='hn'>3</><span class='hd'>}</> </><span class='ho'>tabindex</><span class='hk'>=</><span class='hn'>0</><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>name</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hc'>!/!/ mainTemplate is the template object generated by main()</></><div><span class='hr'>const</> <span class='hv'>mainTemplate</><span class='hk'>:</> <span class='ht'>IvTemplate</> <span class='hk'>=</> <span class='hf'>main</>()</><div>    .<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>)</><div>    .<span class='hf'>render</>({</><div>        title: <span class='hs'>\"The Simpsons\"</>,</><div>        nameList: [<span class='hs'>\"Homer\"</>, <span class='hs'>\"Marge\"</>, <span class='hs'>\"Bart\"</>, <span class='hs'>\"Lisa\"</>, <span class='hs'>\"Maggie\"</>]</><div>    });</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>function</> <span class='hf'>focusTitle</>() {</><div>    <span class='hr'>const</> <span class='hv'>h1</> <span class='hk'>=</> <span class='hv'>mainTemplate</>.<span class='hf'>query</>(<span class='hs'>\"#title\"</>);</><div>    <span class='hk'>if</> (<span class='hv'>h1</>) {</><div>        <span class='hv'>h1</>.<span class='hf'>focus</>();</><div>    }</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>function</> <span class='hf'>focus3rd</>() {</><div>    <span class='hr'>const</> <span class='hv'>li</> <span class='hk'>=</> <span class='hv'>mainTemplate</>.<span class='hf'>query</>(<span class='hs'>\"#third\"</>);</><div>    <span class='hk'>if</> (<span class='hv'>li</>) {</><div>        <span class='hv'>li</>.<span class='hf'>focus</>();</><div>    }</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>let</> <span class='hv'>nextIdx</> <span class='hk'>=</> <span class='hk'>-</><span class='hn'>1</>;</><div><span class='hr'>function</> <span class='hf'>focusNext</>() {</><div>    <span class='hv'>nextIdx</><span class='hk'>++</>;</><div>    <span class='hc'>!/!/ true parameter: query all items</></><div>    <span class='hr'>const</> <span class='hv'>lis</> <span class='hk'>=</> <span class='hv'>mainTemplate</>.<span class='hf'>query</>(<span class='hs'>\"#item\"</>, <span class='hn'>true</>);</><div>    <span class='hk'>if</> (<span class='hv'>lis</>) {</><div>        <span class='hk'>if</> (<span class='hv'>nextIdx</> <span class='hk'>>=</> <span class='hv'>lis</>.length) {</><div>            <span class='hv'>nextIdx</> <span class='hk'>=</> <span class='hn'>0</>;</><div>        }</><div>        <span class='hv'>lis</>[<span class='hv'>nextIdx</>].<span class='hf'>focus</>();</><div>    }</><div>}</></></>"},{title:"$template injection",code:"labels2",content:"<div class='text'><h1> $template injection </><*notions><.notion name='$template injection'> to access the IvTemplate API in the rendering function or in the template controller </><.notion name='query() from controller methods'/></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>title</><span class='hk'>:</><span class='hy'>string</>, <span class='hv'>nameList</><span class='hk'>:</><span class='hy'>string</>[], <span class='hv'>$template</><span class='hk'>:</><span class='ht'>IvTemplate</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"commands\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$template</>.<span class='hf'>query</>(<span class='hs'>\"#title\"</>).<span class='hf'>focus</>()<span class='hd'>}</><span class='hp'>></><span class='hs'> # focus title #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>h1</><span class='ho'> <span class='hd'>#</>title</> <span class='ho'>tabindex</><span class='hk'>=</><span class='hn'>0</><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>title</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>h1</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*list</> <span class='ho'>itemsList</><span class='hk'>=</><span class='hd'>{</><span class='hv'>nameList</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>)</><div>    .<span class='hf'>render</>({</><div>        title: <span class='hs'>\"The Simpsons\"</>,</><div>        nameList: [<span class='hs'>\"Homer\"</>, <span class='hs'>\"Marge\"</>, <span class='hs'>\"Bart\"</>, <span class='hs'>\"Lisa\"</>, <span class='hs'>\"Maggie\"</>]</><div>    });</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>list</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>ListCtl</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"commands\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>focus3rd</>()<span class='hd'>}</><span class='hp'>></><span class='hs'> # focus 3rd #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hv'>$</>.<span class='hf'>focusNext</>()<span class='hd'>}</><span class='hp'>></><span class='hs'> # focus next #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>ul</><span class='hp'>></></><div>        <span class='hr'>let</> <span class='hv'>count</><span class='hk'>=</><span class='hn'>0</>;</><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>name</> <span class='hk'>of</> <span class='hv'>$</>.<span class='hv'>$api</>.<span class='hv'>itemsList</>) {</><div>            <span class='hv'>count</><span class='hk'>++</>;</><div>            <span class='hp'>!<</><span class='hg'>li</><span class='ho'> <span class='hd'>#</>item <span class='hd'>#</>third<span class='hk'>=</><span class='hd'>{</><span class='hv'>count</><span class='hk'>===</><span class='hn'>3</><span class='hd'>}</> </><span class='ho'>tabindex</><span class='hk'>=</><span class='hn'>0</><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>name</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>ListApi</> {</><div>    <span class='hv'>itemsList</><span class='hk'>:</> <span class='hy'>string</>[];</><div>}</><div> </><div>@<span class='hv'>Controller</> <span class='hr'>class</> <span class='ht'>ListCtl</> {</><div>    <span class='hv'>$api</><span class='hk'>:</> <span class='ht'>ListApi</>;</><div>    <span class='hv'>$template</><span class='hk'>:</> <span class='ht'>IvTemplate</>;</><div>    <span class='hv'>nextIdx</> <span class='hk'>=</> <span class='hk'>-</><span class='hn'>1</>;</><div> </><div>    <span class='hf'>focus3rd</>() {</><div>        <span class='hr'>const</> <span class='hv'>li</> <span class='hk'>=</> <span class='hv'>this</>.<span class='hv'>$template</>.<span class='hf'>query</>(<span class='hs'>\"#third\"</>);</><div>        <span class='hk'>if</> (<span class='hv'>li</>) {</><div>            <span class='hv'>li</>.<span class='hf'>focus</>();</><div>        }</><div>    }</><div> </><div>    <span class='hf'>focusNext</>() {</><div>        <span class='hv'>this</>.<span class='hv'>nextIdx</><span class='hk'>++</>;</><div>        <span class='hc'>!/!/ true parameter: query all items</></><div>        <span class='hr'>const</> <span class='hv'>lis</> <span class='hk'>=</> <span class='hv'>this</>.<span class='hv'>$template</>.<span class='hf'>query</>(<span class='hs'>\"#item\"</>, <span class='hn'>true</>);</><div>        <span class='hk'>if</> (<span class='hv'>lis</>) {</><div>            <span class='hk'>if</> (<span class='hv'>this</>.<span class='hv'>nextIdx</> <span class='hk'>>=</> <span class='hv'>lis</>.length) {</><div>                <span class='hv'>this</>.<span class='hv'>nextIdx</> <span class='hk'>=</> <span class='hn'>0</>;</><div>            }</><div>            <span class='hv'>lis</>[<span class='hv'>this</>.<span class='hv'>nextIdx</>].<span class='hf'>focus</>();</><div>        }</><div>    }</><div>}</></></>"},{title:"public api methods",code:"labels3",content:"<div class='text'><h1> Component API methods </><*notions><.notion name='API methods'> to expose public methods to component callers </><.notion name='#labels on components'> to retrieve a component's api </></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>title</><span class='hk'>:</><span class='hy'>string</>, <span class='hv'>nameList</><span class='hk'>:</><span class='hy'>string</>[], <span class='hv'>$template</><span class='hk'>:</><span class='ht'>IvTemplate</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"commands\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</> <span class='hk'>=</> <span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Click on a button to focus one of elements below #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hf'>focusTitle</>(<span class='hv'>$template</>)<span class='hd'>}</><span class='hp'>></><span class='hs'> # title #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hf'>focus3rd</>(<span class='hv'>$template</>)<span class='hd'>}</><span class='hp'>></><span class='hs'> # 3rd item #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>button</> <span class='hd'>@</><span class='ho'>onclick</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=></><span class='hf'>focusNext</>(<span class='hv'>$template</>)<span class='hd'>}</><span class='hp'>></><span class='hs'> # next item #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>h1</><span class='ho'> <span class='hd'>#</>title</> <span class='ho'>tabindex</><span class='hk'>=</><span class='hn'>0</><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>title</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>h1</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>ul</><span class='hp'>></></><div>        <span class='hr'>let</> <span class='hv'>count</><span class='hk'>=</><span class='hn'>0</>;</><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>name</> <span class='hk'>of</> <span class='hv'>nameList</>) {</><div>            <span class='hv'>count</><span class='hk'>++</>;</><div>            <span class='hp'>!<</><span class='hg'>*item</><span class='ho'> <span class='hd'>#</>item <span class='hd'>#</>third<span class='hk'>=</><span class='hd'>{</><span class='hv'>count</><span class='hk'>===</><span class='hn'>3</><span class='hd'>}</></><span class='hp'>></><span class='hs'> # <span class='hd'>{</><span class='hv'>name</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hc'>!/!/ first instance</></><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>)</><div>    .<span class='hf'>render</>({</><div>        title: <span class='hs'>\"The Simpsons\"</>,</><div>        nameList: [<span class='hs'>\"Homer\"</>, <span class='hs'>\"Marge\"</>, <span class='hs'>\"Bart\"</>, <span class='hs'>\"Lisa\"</>, <span class='hs'>\"Maggie\"</>]</><div>    });</><div><span class='hc'>!/!/ second instance</></><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>)</><div>    .<span class='hf'>render</>({</><div>        title: <span class='hs'>\"The Looney Tunes\"</>,</><div>        nameList: [<span class='hs'>\"Bugs Bunny\"</>, <span class='hs'>\"Daffy Duck\"</>, <span class='hs'>\"Porky Pig\"</>, <span class='hs'>\"Elmer Fudd\"</>, <span class='hs'>\"Taz\"</>]</><div>    });</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>function</> <span class='hf'>focusTitle</>(<span class='hv'>tpl</><span class='hk'>:</> <span class='ht'>IvTemplate</>) {</><div>    <span class='hr'>const</> <span class='hv'>h1</> <span class='hk'>=</> <span class='hv'>tpl</>.<span class='hf'>query</>(<span class='hs'>\"#title\"</>);</><div>    <span class='hk'>if</> (<span class='hv'>h1</>) {</><div>        <span class='hv'>h1</>.<span class='hf'>focus</>();</><div>    }</><div>}</><div> </><div><span class='hr'>function</> <span class='hf'>focus3rd</>(<span class='hv'>tpl</><span class='hk'>:</> <span class='ht'>IvTemplate</>) {</><div>    <span class='hr'>const</> <span class='hv'>li</> <span class='hk'>=</> <span class='hv'>tpl</>.<span class='hf'>query</>(<span class='hs'>\"#third\"</>);</><div>    <span class='hk'>if</> (<span class='hv'>li</>) {</><div>        <span class='hv'>li</>.<span class='hf'>focus</>();</><div>    }</><div>}</><div> </><div><span class='hr'>let</> <span class='hv'>nextIdx</> <span class='hk'>=</> <span class='hk'>-</><span class='hn'>1</>;</><div><span class='hr'>function</> <span class='hf'>focusNext</>(<span class='hv'>tpl</><span class='hk'>:</> <span class='ht'>IvTemplate</>) {</><div>    <span class='hv'>nextIdx</><span class='hk'>++</>;</><div>    <span class='hc'>!/!/ true parameter: query all items</></><div>    <span class='hr'>const</> <span class='hv'>lis</> <span class='hk'>=</> <span class='hv'>tpl</>.<span class='hf'>query</>(<span class='hs'>\"#item\"</>, <span class='hn'>true</>);</><div>    <span class='hk'>if</> (<span class='hv'>lis</>) {</><div>        <span class='hk'>if</> (<span class='hv'>nextIdx</> <span class='hk'>>=</> <span class='hv'>lis</>.length) {</><div>            <span class='hv'>nextIdx</> <span class='hk'>=</> <span class='hn'>0</>;</><div>        }</><div>        <span class='hv'>lis</>[<span class='hv'>nextIdx</>].<span class='hf'>focus</>();</><div>    }</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>API</> <span class='hr'>class</> <span class='ht'>ItemApi</> {</><div>    <span class='hv'>$content</><span class='hk'>:</> <span class='ht'>IvContent</>;</><div>    <span class='hf'>focus</><span class='hk'>:</> () <span class='hr'>=></> <span class='hy'>void</>;</><div>}</><div> </><div>@<span class='hv'>Controller</> <span class='hr'>class</> <span class='ht'>ItemCtl</> {</><div>    <span class='hv'>$api</><span class='hk'>:</> <span class='ht'>ItemApi</>;</><div>    <span class='hv'>$template</><span class='hk'>:</> <span class='ht'>IvTemplate</>;</><div> </><div>    <span class='hf'>$init</>() {</><div>        <span class='hv'>this</>.<span class='hv'>$api</>.<span class='hf'>focus</> <span class='hk'>=</> () <span class='hr'>=></> {</><div>            <span class='hr'>let</> <span class='hv'>root</> <span class='hk'>=</> <span class='hv'>this</>.<span class='hv'>$template</>.<span class='hf'>query</>(<span class='hs'>\"#root\"</>);</><div>            <span class='hk'>if</> (root) {</><div>                root.<span class='hf'>focus</>();</><div>            }</><div>        }</><div>    }</><div>}</><div> </><div><span class='hr'>const</> <span class='hv'>item</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>ItemCtl</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>li</><span class='ho'> <span class='hd'>#</>root</> <span class='ho'>tabindex</><span class='hk'>=</><span class='hn'>0</> <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>$</>.<span class='hv'>$api</>.<span class='hv'>$content</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></>"},{title:"svg clock",code:"clock",content:"<div class='text'><h1> SVG clock </><*notions><.notion name='SVG'> as any other HTML elements </><.notion name='$dispose'> life cycle hook </></></><*code><div class='extract ts'><div>@<span class='hv'>Controller</> <span class='hr'>class</> <span class='ht'>ClockCtl</> {</><div>    <span class='hc'>!/!/ internal data model</></><div>    <span class='hv'>iid</><span class='hk'>:</> <span class='hy'>any</>; <span class='hc'>!/!/ interval id</></><div>    <span class='hv'>hours</><span class='hk'>:</> <span class='hy'>number</>;</><div>    <span class='hv'>minutes</><span class='hk'>:</> <span class='hy'>number</>;</><div>    <span class='hv'>seconds</><span class='hk'>:</> <span class='hy'>number</>;</><div>    <span class='hv'>milliseconds</><span class='hk'>:</> <span class='hy'>number</>;</><div> </><div>    <span class='hf'>$init</>() {</><div>        <span class='hv'>this</>.<span class='hv'>iid</> <span class='hk'>=</> setInterval(<span class='hv'>this</>.<span class='hv'>tick</>.<span class='hf'>bind</>(<span class='hv'>this</>), <span class='hn'>100</>);</><div>        <span class='hv'>this</>.<span class='hf'>tick</>();</><div>    }</><div> </><div>    <span class='hf'>$dispose</>() {</><div>        clearInterval(<span class='hv'>this</>.<span class='hv'>iid</>);</><div>        <span class='hv'>this</>.<span class='hv'>iid</> <span class='hk'>=</> <span class='hn'>null</>;</><div>    }</><div> </><div>    <span class='hf'>tick</>() {</><div>        <span class='hr'>var</> <span class='hv'>d</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>Date</>();</><div>        <span class='hv'>this</>.<span class='hv'>hours</> <span class='hk'>=</> <span class='hv'>d</>.<span class='hf'>getHours</>();</><div>        <span class='hv'>this</>.<span class='hv'>minutes</> <span class='hk'>=</> <span class='hv'>d</>.<span class='hf'>getMinutes</>();</><div>        <span class='hv'>this</>.<span class='hv'>seconds</> <span class='hk'>=</> <span class='hv'>d</>.<span class='hf'>getSeconds</>();</><div>        <span class='hv'>this</>.<span class='hv'>milliseconds</> <span class='hk'>=</> <span class='hv'>d</>.<span class='hf'>getMilliseconds</>();</><div>    }</><div>};</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>clock</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>$</><span class='hk'>:</><span class='ht'>ClockCtl</>) <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ original example from Rich Harris at https:!/!/svelte.dev!/examples#clock</></><div>    <span class='hp'>!<</><span class='hg'>svg</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"clock\"</> <span class='ho'>viewBox</><span class='hk'>=</><span class='hs'>\"0 0 100 100\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>g</> <span class='ho'>transform</><span class='hk'>=</><span class='hs'>\"translate(50,50)\"</><span class='hp'>></></><div>            <span class='hc'>!/!/ dial</></><div>            <span class='hp'>!<</><span class='hg'>circle</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"clock-face\"</> <span class='ho'>r</><span class='hk'>=</><span class='hs'>\"48\"</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hc'>!/!/ minute markers</></><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>i</><span class='hk'>=</><span class='hn'>0</>;<span class='hn'>60</><span class='hk'>></><span class='hv'>i</>;<span class='hv'>i</><span class='hk'>++</>) {</><div>                <span class='hr'>let</> <span class='hv'>isMajorMarker</> <span class='hk'>=</> (<span class='hv'>i</><span class='hk'>%</><span class='hn'>5</> <span class='hk'>===</> <span class='hn'>0</>);</><div>                <span class='hp'>!<</><span class='hg'>line</> <span class='ho'>class</><span class='hk'>=</><span class='hd'>{</><span class='hv'>isMajorMarker</><span class='hk'>?</> <span class='hs'>\"major\"</> <span class='hk'>:</> <span class='hs'>\"minor\"</><span class='hd'>}</> </><div>                    <span class='ho'>y1</><span class='hk'>=</><span class='hd'>{</><span class='hv'>isMajorMarker</><span class='hk'>?</> <span class='hn'>35</> <span class='hk'>:</> <span class='hn'>42</><span class='hd'>}</> <span class='ho'>y2</><span class='hk'>=</><span class='hn'>45</></><div>                    <span class='ho'>transform</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"rotate(\"</> <span class='hk'>+</> (<span class='hn'>360</> <span class='hk'>*</> <span class='hv'>i</><span class='hk'>!/</><span class='hn'>60</>) <span class='hk'>+</> <span class='hs'>\")\"</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>            }</><div>            <span class='hc'>!/!/ hours hand</></><div>            <span class='hp'>!<</><span class='hg'>*hand</> <span class='ho'>kind</><span class='hk'>=</><span class='hs'>\"hour\"</> <span class='ho'>rotation</><span class='hk'>=</><span class='hd'>{</><span class='hn'>30</><span class='hk'>*</><span class='hv'>$</>.<span class='hv'>hours</><span class='hk'>+</><span class='hv'>$</>.<span class='hv'>minutes</><span class='hk'>!/</><span class='hn'>2</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hc'>!/!/ minutes hand</></><div>            <span class='hp'>!<</><span class='hg'>*hand</> <span class='ho'>kind</><span class='hk'>=</><span class='hs'>\"minute\"</> <span class='ho'>rotation</><span class='hk'>=</><span class='hd'>{</><span class='hn'>6</><span class='hk'>*</><span class='hv'>$</>.<span class='hv'>minutes</><span class='hk'>+</><span class='hv'>$</>.<span class='hv'>seconds</><span class='hk'>!/</><span class='hn'>10</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hc'>!/!/ seconds hand</></><div>            <span class='hp'>!<</><span class='hg'>g</> <span class='ho'>transform</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"rotate(\"</> <span class='hk'>+</> <span class='hn'>6</> <span class='hk'>*</> (<span class='hv'>$</>.<span class='hv'>seconds</> <span class='hk'>+</> <span class='hv'>$</>.<span class='hv'>milliseconds</><span class='hk'>*</><span class='hn'>0.001</>) <span class='hk'>+</><span class='hs'>\")\"</><span class='hd'>}</><span class='hp'>></></><div>                <span class='hp'>!<</><span class='hg'>line</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"second\"</> <span class='ho'>y1</><span class='hk'>=</><span class='hs'>\"10\"</> <span class='ho'>y2</><span class='hk'>=</><span class='hs'>\"-38\"</><span class='hp'>!/</><span class='hp'>></></><div>                <span class='hp'>!<</><span class='hg'>circle</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"second-cw\"</> <span class='ho'>transform</><span class='hk'>=</><span class='hs'>\"translate(0,8)\"</> <span class='ho'>r</><span class='hk'>=</><span class='hs'>\"1\"</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>g</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>g</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>svg</><span class='hp'>></></><div>}`, <span class='hv'>hand</>, <span class='hv'>ClockCtl</>);</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>hand</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>kind</><span class='hk'>:</> <span class='hy'>string</>, <span class='hv'>rotation</><span class='hk'>:</> <span class='hy'>number</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>line</> <span class='ho'>class</><span class='hk'>=</><span class='hd'>{</><span class='hv'>kind</><span class='hd'>}</> </><div>        <span class='ho'>y1</><span class='hk'>=</><span class='hs'>\"2\"</> </><div>        <span class='ho'>y2</><span class='hk'>=</><span class='hd'>{</><span class='hv'>kind</><span class='hk'>===</><span class='hs'>\"minute\"</><span class='hk'>?</> <span class='hs'>\"-25\"</> <span class='hk'>:</> <span class='hs'>\"-17\"</><span class='hd'>}</> </><div>        <span class='ho'>transform</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"rotate(\"</> <span class='hk'>+</> <span class='hv'>rotation</> <span class='hk'>+</> <span class='hs'>\")\"</><span class='hd'>}</></><div>    <span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hc'>!/!/ main display</></><div><span class='hf'>clock</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hf'>getElementById</>(<span class='hs'>\"main\"</>)).<span class='hf'>render</>();</></></>"}]},{title:"forms",code:"forms",items:[{title:"input bindings",code:"forms1",content:"<div class='text'><h1> Input bindings </><*notions><.notion name='@value decorator'> to bind input and textareas to data models </><.notion name='template uid'> to create unique ids!/labels </></></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>CarDescription</> {</><div>    <span class='hv'>name</><span class='hk'>:</> <span class='hy'>string</>;       <span class='hc'>!/!/ free flow text</></><div>    <span class='hv'>modelYear</><span class='hk'>:</> <span class='hy'>number</>;  <span class='hc'>!/!/ 4-digit number</></><div>    <span class='hv'>electric</><span class='hk'>:</> <span class='hy'>boolean</>;  <span class='hc'>!/!/ true if full electric model</></><div>    <span class='hv'>color</><span class='hk'>:</> <span class='hy'>string</>;      <span class='hc'>!/!/ 2-letter code: WH:while BK:black RD:red BL:blue</></><div>}</><div> </><div><span class='hr'>const</> <span class='hv'>colorCodes</> <span class='hk'>=</> [<span class='hs'>\"WH\"</>, <span class='hs'>\"BK\"</>, <span class='hs'>\"RD\"</>, <span class='hs'>\"BL\"</>],</><div>    <span class='hv'>i18nColors</> <span class='hk'>=</> {</><div>        <span class='hs'>\"WH\"</>: <span class='hs'>\"white\"</>,</><div>        <span class='hs'>\"BK\"</>: <span class='hs'>\"black\"</>,</><div>        <span class='hs'>\"RD\"</>: <span class='hs'>\"red\"</>,</><div>        <span class='hs'>\"BL\"</>: <span class='hs'>\"blue\"</></><div>    };</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>carEditor</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>data</><span class='hk'>:</><span class='ht'>CarDescription</>, <span class='hv'>$template</><span class='hk'>:</><span class='ht'>IvTemplate</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"car editor\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Name: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"text\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>name</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Model Year: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"number\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>modelYear</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"color\"</><span class='hp'>></><span class='hs'> # Color: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>color</> <span class='hk'>of</> <span class='hv'>colorCodes</>) {</><div>                <span class='hc'>!/!/ group of radio buttons</></><div>                <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></> </><div>                    <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"radio\"</> </><div>                        <span class='ho'>name</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"color\"</> <span class='hk'>+</> <span class='hv'>$template</>.<span class='hv'>uid</><span class='hd'>}</> <span class='hc'>!/!/ name must be unique</></><div>                        <span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hv'>color</><span class='hd'>}</> <span class='hc'>!/!/ this is the code associated to this radio button</></><div>                        <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>color</><span class='hd'>}</> <span class='hc'>!/!/ binding to the data model</></><div>                    <span class='hp'>!/</><span class='hp'>></> </><div><span class='hs'>                    # <span class='hd'>{</><span class='hd'>::</><span class='hv'>i18nColors</>[<span class='hv'>color</>]<span class='hd'>}</> #</> </><div>                <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            }</><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></></><div>                <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"checkbox\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>electric</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # electric #</> </><div>            <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>label</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>colorCodes</>, <span class='hv'>i18nColors</>);</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hk'>import</> { <span class='hv'>value</> } <span class='hk'>from</> <span class='hs'>\"..!/..!/..!/iv!/inputs\"</>;</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>data</><span class='hk'>:</><span class='ht'>CarDescription</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"summary\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"title\"</><span class='hp'>></><span class='hs'> # Summary #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # Car name: <span class='hd'>{</><span class='hv'>data</>.<span class='hv'>name</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # Model year: <span class='hd'>{</><span class='hv'>data</>.<span class='hv'>modelYear</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # Color code: <span class='hd'>{</><span class='hv'>data</>.<span class='hv'>color</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # Electric: <span class='hd'>{</><span class='hv'>data</>.<span class='hv'>electric</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*carEditor</><span class='ho'> <span class='hd'>{</><span class='hv'>data</><span class='hd'>}</></><span class='hp'>!/</><span class='hp'>></> <span class='hc'>!/!/ equivalent to data={data}</></><div>    <span class='hp'>!<</><span class='hg'>*carEditor</><span class='ho'> <span class='hd'>{</><span class='hv'>data</><span class='hd'>}</></><span class='hp'>!/</><span class='hp'>></> <span class='hc'>!/!/ 2nd instance to demonstrate data-binding</></><div>}`);</><div> </><div><span class='hr'>const</> <span class='hv'>cd</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>CarDescription</>();</><div><span class='hv'>cd</>.<span class='hv'>name</> <span class='hk'>=</> <span class='hs'>\"Ford Model T\"</>;</><div><span class='hv'>cd</>.<span class='hv'>modelYear</> <span class='hk'>=</> <span class='hn'>1908</>;</><div><span class='hv'>cd</>.<span class='hv'>electric</> <span class='hk'>=</> <span class='hn'>false</>;</><div><span class='hv'>cd</>.<span class='hv'>color</> <span class='hk'>=</> <span class='hs'>\"BK\"</>;</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({ data: <span class='hv'>cd</> });</></></><div class='text'><p> Some comment </></>"},{title:"debounce & change events",code:"forms2",content:"<div class='text'><h1> Input binding options </><*notions><.notion name='@value debounce parameter'> to delay change events and prevent bursting </><.notion name='@value events'> to specify which events should be used (on top of \"change\") </></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>carEditor</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>data</><span class='hk'>:</><span class='ht'>CarDescription</>, </><div>        <span class='hv'>o</><span class='hk'>:</><span class='ht'>ValueOptions</>, </><div>        <span class='hv'>$template</><span class='hk'>:</><span class='ht'>IvTemplate</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"car editor\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Name: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"text\"</> </><div>                <span class='hd'>@</><span class='ho'>value</><span class='hd'>(</><span class='ho'>data</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>name</><span class='hd'>}</> <span class='ho'>debounce</><span class='hk'>=</><span class='hd'>{</><span class='hv'>o</>.<span class='hv'>debounce</><span class='hd'>}</> <span class='ho'>events</><span class='hk'>=</><span class='hd'>{</><span class='hv'>o</>.<span class='hv'>events</><span class='hd'>}</><span class='hd'>)</></><div>            <span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Model Year: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"number\"</> </><div>                <span class='hd'>@</><span class='ho'>value</><span class='hd'>(</><span class='ho'>data</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>modelYear</><span class='hd'>}</> <span class='ho'>debounce</><span class='hk'>=</><span class='hd'>{</><span class='hv'>o</>.<span class='hv'>debounce</><span class='hd'>}</> <span class='ho'>events</><span class='hk'>=</><span class='hd'>{</><span class='hv'>o</>.<span class='hv'>events</><span class='hd'>}</><span class='hd'>)</></><div>            <span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"color\"</><span class='hp'>></><span class='hs'> # Color: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>color</> <span class='hk'>of</> <span class='hv'>colorCodes</>) {</><div>                <span class='hc'>!/!/ group of radio buttons</></><div>                <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></> </><div>                    <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"radio\"</> </><div>                        <span class='ho'>name</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"color\"</> <span class='hk'>+</> <span class='hv'>$template</>.<span class='hv'>uid</><span class='hd'>}</> <span class='hc'>!/!/ name must be unique</></><div>                        <span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hv'>color</><span class='hd'>}</> <span class='hc'>!/!/ this is the code associated to this radio button</></><div>                        <span class='hd'>@</><span class='ho'>value</><span class='hd'>(</><span class='ho'>data</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>color</><span class='hd'>}</> <span class='ho'>debounce</><span class='hk'>=</><span class='hd'>{</><span class='hv'>o</>.<span class='hv'>debounce</><span class='hd'>}</> <span class='ho'>events</><span class='hk'>=</><span class='hd'>{</><span class='hv'>o</>.<span class='hv'>events</><span class='hd'>}</><span class='hd'>)</></><div>                    <span class='hp'>!/</><span class='hp'>></> </><div><span class='hs'>                    # <span class='hd'>{</><span class='hd'>::</><span class='hv'>i18nColors</>[<span class='hv'>color</>]<span class='hd'>}</> #</> </><div>                <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            }</><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></></><div>                <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"checkbox\"</> </><div>                    <span class='hd'>@</><span class='ho'>value</><span class='hd'>(</><span class='ho'>data</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>electric</><span class='hd'>}</> <span class='ho'>debounce</><span class='hk'>=</><span class='hd'>{</><span class='hv'>o</>.<span class='hv'>debounce</><span class='hd'>}</> <span class='ho'>events</><span class='hk'>=</><span class='hd'>{</><span class='hv'>o</>.<span class='hv'>events</><span class='hd'>}</><span class='hd'>)</></><div>                <span class='hp'>!/</><span class='hp'>></><span class='hs'> # electric #</> </><div>            <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>label</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`, <span class='hv'>colorCodes</>, <span class='hv'>i18nColors</>);</><div> </><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>data</><span class='hk'>:</><span class='ht'>CarDescription</>, <span class='hv'>o</><span class='hk'>:</><span class='ht'>ValueOptions</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"summary\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"title\"</><span class='hp'>></><span class='hs'> # Summary #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # Car name: <span class='hd'>{</><span class='hv'>data</>.<span class='hv'>name</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # Model year: <span class='hd'>{</><span class='hv'>data</>.<span class='hv'>modelYear</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # Color code: <span class='hd'>{</><span class='hv'>data</>.<span class='hv'>color</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> # Electric: <span class='hd'>{</><span class='hv'>data</>.<span class='hv'>electric</><span class='hd'>}</> #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*optionEditor</><span class='ho'> <span class='hd'>{</><span class='hv'>o</><span class='hd'>}</></><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*carEditor</><span class='ho'> <span class='hd'>{</><span class='hv'>data</><span class='hd'>}</> <span class='hd'>{</><span class='hv'>o</><span class='hd'>}</></><span class='hp'>!/</><span class='hp'>></> <span class='hc'>!/!/ equivalent to data={data}</></><div>    <span class='hp'>!<</><span class='hg'>*carEditor</><span class='ho'> <span class='hd'>{</><span class='hv'>data</><span class='hd'>}</> <span class='hd'>{</><span class='hv'>o</><span class='hd'>}</></><span class='hp'>!/</><span class='hp'>></> <span class='hc'>!/!/ 2nd instance to demonstrate data-binding</></><div>}`);</><div> </><div><span class='hr'>const</> <span class='hv'>cd</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>CarDescription</>();</><div><span class='hv'>cd</>.<span class='hv'>name</> <span class='hk'>=</> <span class='hs'>\"Ford Model T\"</>;</><div><span class='hv'>cd</>.<span class='hv'>modelYear</> <span class='hk'>=</> <span class='hn'>1908</>;</><div><span class='hv'>cd</>.<span class='hv'>electric</> <span class='hk'>=</> <span class='hn'>false</>;</><div><span class='hv'>cd</>.<span class='hv'>color</> <span class='hk'>=</> <span class='hs'>\"BK\"</>;</><div> </><div><span class='hr'>const</> <span class='hv'>options</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>ValueOptions</>();</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({ data: <span class='hv'>cd</>, o: <span class='hv'>options</> });</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>ValueOptions</> {</><div>    <span class='hv'>debounce</><span class='hk'>:</> <span class='hy'>number</> <span class='hk'>=</> <span class='hn'>0</>;        <span class='hc'>!/!/ default debounce value</></><div>    <span class='hv'>events</><span class='hk'>:</> <span class='hy'>string</> <span class='hk'>=</> <span class='hs'>\"input\"</>;    <span class='hc'>!/!/ default events value</></><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>optionEditor</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>o</><span class='hk'>:</><span class='ht'>ValueOptions</>, </><div>        <span class='hv'>evtInput</><span class='hk'>:</><span class='hy'>boolean</> <span class='hk'>=</> <span class='hn'>true</>, </><div>        <span class='hv'>evtFocus</><span class='hk'>:</><span class='hy'>boolean</>, </><div>        <span class='hv'>evtBlur</><span class='hk'>:</><span class='hy'>boolean</>, </><div>        <span class='hv'>$</>) <span class='hr'>=></> {</><div>    <span class='hc'>!/!/ sync o.events with the individual params</></><div>    <span class='hr'>let</> <span class='hv'>events</><span class='hk'>:</><span class='hy'>string</>[] <span class='hk'>=</> [];</><div>    <span class='hk'>if</> (<span class='hv'>evtInput</>) <span class='hv'>events</>.<span class='hf'>push</>(<span class='hs'>\"input\"</>);</><div>    <span class='hk'>if</> (<span class='hv'>evtFocus</>) <span class='hv'>events</>.<span class='hf'>push</>(<span class='hs'>\"focus\"</>);</><div>    <span class='hk'>if</> (<span class='hv'>evtBlur</>) <span class='hv'>events</>.<span class='hf'>push</>(<span class='hs'>\"blur\"</>);</><div>    <span class='hv'>o</>.<span class='hv'>events</> <span class='hk'>=</> <span class='hv'>events</>.<span class='hf'>join</>(<span class='hs'>\";\"</>);</><div> </><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"option editor\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Debounce (ms): #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"number\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>o</>.<span class='hv'>debounce</><span class='hd'>}</> <span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Extra events: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></> <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"checkbox\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$</>.<span class='hv'>evtInput</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # input #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></> <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"checkbox\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$</>.<span class='hv'>evtFocus</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # focus #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></> <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"checkbox\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$</>.<span class='hv'>evtBlur</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # blur #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Events value: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div><span class='hs'>            # \"<span class='hd'>{</><span class='hv'>o</>.<span class='hv'>events</><span class='hd'>}</>\" #</></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> Some comment </></>"},{title:"data adaptation",code:"forms3",content:"<div class='text'><h1> Input bindings data conversion </><*notions><.notion name='@value input2data & data2input'> to convert data between input and data model </></></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>FormDataModel</> {</><div>    <span class='hv'>month</><span class='hk'>:</> <span class='hy'>string</> <span class='hk'>=</> <span class='hs'>\"JAN\"</>;  <span class='hc'>!/!/ month code: JAN, FEB, MAR, etc.</></><div>    <span class='hv'>urgent</><span class='hk'>:</> <span class='hy'>string</> <span class='hk'>=</> <span class='hs'>\"N\"</>;   <span class='hc'>!/!/ Y or N</></><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>data</><span class='hk'>:</> <span class='ht'>FormDataModel</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"main\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"title\"</><span class='hp'>></><span class='hs'> # Form: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></> </><div><span class='hs'>                # Month: #</> </><div>                <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"number\"</> <span class='ho'>min</><span class='hk'>=</><span class='hn'>1</> <span class='ho'>max</><span class='hk'>=</><span class='hn'>12</></><div>                    <span class='hd'>@</><span class='ho'>value</><span class='hd'>(</><span class='ho'>data</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>month</><span class='hd'>}</> <span class='ho'>input2data</><span class='hk'>=</><span class='hd'>{</><span class='hv'>nbr2month</><span class='hd'>}</> <span class='ho'>data2input</><span class='hk'>=</><span class='hd'>{</><span class='hv'>month2nbr</><span class='hd'>}</><span class='hd'>)</></><div>                <span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></></><div>                <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"checkbox\"</> </><div>                    <span class='hd'>@</><span class='ho'>value</><span class='hd'>(</><span class='ho'>data</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>data</>.<span class='hv'>urgent</><span class='hd'>}</> <span class='ho'>input2data</><span class='hk'>=</><span class='hd'>{</><span class='hv'>bool2str</><span class='hd'>}</> <span class='ho'>data2input</><span class='hk'>=</><span class='hd'>{</><span class='hv'>str2bool</><span class='hd'>}</><span class='hd'>)</></><div>                <span class='hp'>!/</><span class='hp'>></> </><div><span class='hs'>                # urgent #</> </><div>            <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"title\"</><span class='hp'>></><span class='hs'> # Data model: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Month: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # \"<span class='hd'>{</><span class='hv'>data</>.<span class='hv'>month</><span class='hd'>}</>\" #</></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>            <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # Urgent: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # \"<span class='hd'>{</><span class='hv'>data</>.<span class='hv'>urgent</><span class='hd'>}</>\" #</></><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>function</> <span class='hf'>bool2str</>(<span class='hv'>v</><span class='hk'>:</> <span class='hy'>any</>) {</><div>    <span class='hk'>return</> <span class='hv'>v</> <span class='hk'>?</> <span class='hs'>\"Y\"</> <span class='hk'>:</> <span class='hs'>\"N\"</>;</><div>}</><div><span class='hr'>function</> <span class='hf'>str2bool</>(<span class='hv'>d</><span class='hk'>:</> <span class='hy'>string</>) {</><div>    <span class='hk'>return</> (<span class='hv'>d</> <span class='hk'>===</> <span class='hs'>\"Y\"</> <span class='hk'>||</> <span class='hv'>d</> <span class='hk'>===</> <span class='hs'>\"y\"</>);</><div>}</><div> </><div><span class='hr'>const</> <span class='hv'>MONTHS</> <span class='hk'>=</> [<span class='hs'>\"JAN\"</>, <span class='hs'>\"FEB\"</>, <span class='hs'>\"MAR\"</>, <span class='hs'>\"APR\"</>, <span class='hs'>\"MAY\"</>, <span class='hs'>\"JUN\"</>, </><div>    <span class='hs'>\"JUL\"</>, <span class='hs'>\"AUG\"</>, <span class='hs'>\"SEP\"</>, <span class='hs'>\"OCT\"</>, <span class='hs'>\"NOV\"</>, <span class='hs'>\"DEC\"</>];</><div><span class='hr'>function</> <span class='hf'>nbr2month</>(<span class='hv'>n</><span class='hk'>:</> <span class='hy'>string</>) {</><div>    <span class='hr'>const</> <span class='hv'>nbr</> <span class='hk'>=</> parseInt(<span class='hv'>n</>, <span class='hn'>10</>);</><div>    <span class='hk'>if</> (<span class='hv'>nbr</> <span class='hk'>></> <span class='hn'>0</> <span class='hk'>&&</> <span class='hv'>nbr</> <span class='hk'>!<</> <span class='hn'>13</>) <span class='hk'>return</> <span class='hv'>MONTHS</>[<span class='hv'>nbr</> <span class='hk'>-</> <span class='hn'>1</>];</><div>    <span class='hk'>return</> <span class='hs'>\"\"</>;</><div>}</><div><span class='hr'>function</> <span class='hf'>month2nbr</>(<span class='hv'>m</><span class='hk'>:</> <span class='hy'>string</>) {</><div>    <span class='hr'>const</> <span class='hv'>idx</> <span class='hk'>=</> <span class='hv'>MONTHS</>.<span class='hf'>indexOf</>(<span class='hv'>m</>.<span class='hf'>toUpperCase</>());</><div>    <span class='hk'>if</> (<span class='hv'>idx</> <span class='hk'>></> <span class='hk'>-</><span class='hn'>1</>) <span class='hk'>return</> <span class='hv'>idx</> <span class='hk'>+</> <span class='hn'>1</>;</><div>    <span class='hk'>return</> <span class='hs'>\"\"</>;</><div>}</></></><div class='text'><p> Some comment </></>"},{title:"textarea & select",code:"select",content:"<div class='text'><h1> Textarea and Select </><*notions><.notion name='@value for textarea and select elements'/></></><*code><div class='extract ts'><div>@<span class='hv'>Data</> <span class='hr'>class</> <span class='ht'>FormData</> {</><div>    <span class='hv'>comment</><span class='hk'>:</> <span class='hy'>string</>;    <span class='hc'>!/!/ multi-line text</></><div>    <span class='hv'>color</><span class='hk'>:</> <span class='hy'>string</>;      <span class='hc'>!/!/ 2-letter code: WH:while BK:black RD:red BL:blue</></><div>}</><div> </><div><span class='hr'>const</> <span class='hv'>colorCodes</> <span class='hk'>=</> [<span class='hs'>\"WH\"</>, <span class='hs'>\"BK\"</>, <span class='hs'>\"RD\"</>, <span class='hs'>\"BL\"</>],</><div>    <span class='hv'>i18nColors</> <span class='hk'>=</> {</><div>        <span class='hs'>\"WH\"</>: <span class='hs'>\"white\"</>,</><div>        <span class='hs'>\"BK\"</>: <span class='hs'>\"black\"</>,</><div>        <span class='hs'>\"RD\"</>: <span class='hs'>\"red\"</>,</><div>        <span class='hs'>\"BL\"</>: <span class='hs'>\"blue\"</></><div>    };</><div> </><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>d</><span class='hk'>:</><span class='ht'>FormData</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> #Multi-line text (textarea): #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>textarea</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"comment\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>d</>.<span class='hv'>comment</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div> </><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> #Color (select): #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>select</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"color\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>d</>.<span class='hv'>color</><span class='hd'>}</><span class='hp'>></></><div>        <span class='hk'>for</> (<span class='hr'>let</> <span class='hv'>c</> <span class='hk'>of</> <span class='hv'>colorCodes</>) {</><div>            <span class='hp'>!<</><span class='hg'>option</> <span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hv'>c</><span class='hd'>}</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>i18nColors</>[<span class='hv'>c</>]<span class='hd'>}</>#</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        }</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    </><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"output\"</><span class='hp'>></><span class='hs'> # Data model values: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # comment: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>d</>.<span class='hv'>comment</>.<span class='hf'>replace</>(!/<span class='hn'>\n</>!/<span class='hk'>g</>,\"<span class='hn'>\\</>n\")<span class='hd'>}</>#</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"lbl\"</><span class='hp'>></><span class='hs'> # color: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></><span class='hs'> #<span class='hd'>{</><span class='hv'>d</>.<span class='hv'>color</><span class='hd'>}</>#</></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hr'>let</> <span class='hv'>d</> <span class='hk'>=</> <span class='hk'>new</> <span class='ht'>FormData</>();</><div><span class='hv'>d</>.<span class='hv'>comment</> <span class='hk'>=</> <span class='hs'>\"line1<span class='hn'>\n</>line2\"</>;</><div><span class='hv'>d</>.<span class='hv'>color</> <span class='hk'>=</> <span class='hs'>\"BL\"</>;</><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({ <span class='hv'>d</> });</></></>"}]},{title:"dynamic content",code:"content",items:[{title:"innerHTML",code:"innerHTML",content:"<div class='text'><h1> Unsafe InnerHTML </><*notions><.notion name='@unsafeInnerHTML'> to (unsafely) inject an html string into an element </></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>html</><span class='hk'>:</><span class='hy'>string</>, <span class='hv'>$api</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> #Enter some HTML: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>textarea</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$api</>.<span class='hv'>html</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>    </><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"output\"</><span class='hp'>></><span class='hs'> # Output: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='hd'>@</><span class='ho'>unsafeInnerHTML</><span class='hk'>=</><span class='hd'>{</><span class='hv'>html</><span class='hd'>}</> <span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({html:<span class='hs'>`<span class='hn'></></></><div><span class='hs'>!<div class=\"blue\"> </></><div><span class='hs'>    Hello !<b> World !<!/b> </></><div><span class='hs'>!<!/div></></><div><span class='hs'>`</>});</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hk'>import</> { <span class='hv'>unsafeInnerHTML</> } <span class='hk'>from</> <span class='hs'>'..!/..!/..!/iv!/innerHTML'</>;</></></><div class='text'><p> Some comment </></>"},{title:"xtr strings",code:"xtr1",content:"<div class='text'><h1> XTR strings </><*notions><.notion name='XTR strings'> to define safe HTML fragments that can be dynamically downloaded & rendered </><.notion name='@xtrContent'> to safely inject XTR content in an element </><.notion name='@xtrContent resolver'> to specify which references are accessible to XTR fragments </></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>xtrValue</><span class='hk'>:</><span class='hy'>string</>, <span class='hv'>$api</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></><span class='hs'> #Enter some XTR: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>textarea</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$api</>.<span class='hv'>xtrValue</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>    </><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"output\"</><span class='hp'>></><span class='hs'> # Output: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='hd'>@</><span class='ho'>xtrContent</><span class='hd'>(</><span class='ho'>xtr</><span class='hk'>=</><span class='hd'>{</><span class='hv'>xtrValue</><span class='hd'>}</> <span class='ho'>resolver</><span class='hk'>=</><span class='hd'>{</><span class='hv'>xtrResolver</><span class='hd'>}</><span class='hd'>)</> <span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>({</><div>    xtrValue: <span class='hs'>`<span class='hn'></></></><div><span class='hs'>!<div class={helloClass}> </></><div><span class='hs'>    Hello !<b> World !<!/b> </></><div><span class='hs'>!<!/></></><div><span class='hs'>!<*alert type=\"warning\"></></><div><span class='hs'>    !<.title> !<b> Achtung !!!!!! !<!/b>: !<!/></></><div><span class='hs'>    Some important message...</></><div><span class='hs'>!<!/></></><div><span class='hs'>`</>});</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hk'>import</> { <span class='hv'>xtrContent</> } <span class='hk'>from</> <span class='hs'>'..!/..!/..!/iv!/xtr-renderer'</>;</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>async</> <span class='hr'>function</> <span class='hf'>xtrResolver</>(<span class='hv'>ref</><span class='hk'>:</> <span class='hy'>string</>)<span class='hk'>:</> <span class='ht'>Promise</>!<<span class='hy'>any</>> {</><div>    <span class='hc'>!/!/ filter authorized references</></><div>    <span class='hk'>if</> (<span class='hv'>ref</> <span class='hk'>===</> <span class='hs'>\"helloClass\"</>) <span class='hk'>return</> <span class='hs'>\"blue\"</>;</><div>    <span class='hk'>if</> (<span class='hv'>ref</> <span class='hk'>===</> <span class='hs'>\"alert\"</>) <span class='hk'>return</> <span class='hv'>alert</>;</><div>    console.log(<span class='hs'>\"UNAUTHORIZED REF: \"</> <span class='hk'>+</> <span class='hv'>ref</>);</><div>    <span class='hk'>return</> <span class='hn'>null</>;</><div>}</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>alert</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>type</><span class='hk'>=</><span class='hs'>\"\"</>, <span class='hv'>$content</><span class='hk'>:</><span class='ht'>IvContent</>, <span class='hv'>title</><span class='hk'>:</><span class='ht'>IvContent</>) <span class='hr'>=></> {</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hd'>{</><span class='hs'>\"alert \"</> <span class='hk'>+</> <span class='hv'>type</><span class='hd'>}</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>span</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"title\"</><span class='hp'>></> </><div>            <span class='hk'>if</> (<span class='hv'>title</>) {</><div>                <span class='hp'>!<</><span class='hg'>!!</> <span class='hd'>@</><span class='ho'>content</><span class='hk'>=</><span class='hd'>{</><span class='hv'>title</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></></><div>            } <span class='hk'>else</> {</><div><span class='hs'>                # Warning: #</></><div>            }</><div>        <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>       <span class='hp'>!<</><span class='hg'>!!</><span class='ho'> <span class='hd'>@</>content</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>}`);</></></><div class='text'><p> Some comment </></>"},{title:"static xtr strings",code:"xtr2",content:"<div class='text'><h1> Static XTR strings </><*notions><.notion name='static XTR strings'> that are validated and pre-processed at compile time </><.notion name='XTR special characters'/><.notion name='XTR cdata sections'/></></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>contentA</> <span class='hk'>=</> <span class='hf'>xtr</>`</><div>    <span class='hc'>!/!/ special char encoding with !! prefix</></><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"special\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"info\"</><span class='hp'>></>xtr special characters:<span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        Opening angle bracket: <span class='hn'>!!!<</> (no need for >)<span class='hp'>!<</><span class='hg'>br</><span class='hp'>!/</><span class='hp'>></></><div>        Non-breaking space: \"<span class='hn'>!!s!!s!!s!!s!!s!!s!!s</>\" (vs \"       \")<span class='hp'>!<</><span class='hg'>br</><span class='hp'>!/</><span class='hp'>></></><div>        Bang: <span class='hn'>!!!!</> <span class='hp'>!<</><span class='hg'>br</><span class='hp'>!/</><span class='hp'>></></><div>        New line: <span class='hn'>!!n</>(discarded by HTML parser)<span class='hp'>!<</><span class='hg'>br</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>`;</><div> </><div><span class='hr'>const</> <span class='hv'>contentB</> <span class='hk'>=</> <span class='hf'>xtr</>`</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"info\"</><span class='hp'>></>xtr content...<span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>*alert</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"warning\"</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>.title</><span class='hp'>></> <span class='hp'>!<</><span class='hg'>b</><span class='hp'>></> Important!! <span class='hp'>!<</><span class='hp'>!/</><span class='hg'>b</><span class='hp'>></>: <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        Some important message...</><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>`;</><div> </><div><span class='hr'>const</> <span class='hv'>contentC</> <span class='hk'>=</> <span class='hf'>xtr</>`</><div>    XTR strings also accept cdata sections:</><div>    <span class='hp'>!<</><span class='hg'>div</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"info\"</><span class='hp'>></>(before the cdata section)<span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>!!cdata</><span class='hp'>></></><div>            !/!/ Here content doesn't need to be encoded:</><div>            !<div> Hello World!! !<!/div></><div>            Only end of cdata needs to be escaped: !!!<!/!!cdata> ...</><div>        <span class='hp'>!<!/</><span class='hg'>!!cdata</><span class='hp'>></></><div>        <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"info\"</><span class='hp'>></>(after the cdata section)<span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>`;</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hk'>import</> { <span class='hv'>template</>, <span class='hv'>xtr</> } <span class='hk'>from</> <span class='hs'>\"..!/..!/..!/iv\"</>;</></></><div class='text'><p> Some comment </></><*code><div class='extract ts'><div><span class='hr'>const</> <span class='hv'>main</> <span class='hk'>=</> <span class='hf'>template</>(`(<span class='hv'>selection</><span class='hk'>:</><span class='hy'>string</> <span class='hk'>=</> <span class='hs'>\"A\"</>, <span class='hv'>$</>, <span class='hv'>$template</>) <span class='hr'>=></> {</><div>    <span class='hr'>const</> <span class='hv'>nm</> <span class='hk'>=</> <span class='hs'>\"type\"</> <span class='hk'>+</> <span class='hv'>$template</>.<span class='hv'>uid</>;</><div>    <span class='hp'>!<</><span class='hg'>span</><span class='hp'>></><span class='hs'> #Choose your content: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></> <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"radio\"</> <span class='ho'>name</><span class='hk'>=</><span class='hd'>{</><span class='hv'>nm</><span class='hd'>}</> <span class='ho'>value</><span class='hk'>=</><span class='hs'>\"A\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$</>.<span class='hv'>selection</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # A #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></> <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"radio\"</> <span class='ho'>name</><span class='hk'>=</><span class='hd'>{</><span class='hv'>nm</><span class='hd'>}</> <span class='ho'>value</><span class='hk'>=</><span class='hs'>\"B\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$</>.<span class='hv'>selection</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # B #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hp'>!<</><span class='hg'>label</><span class='hp'>></> <span class='hp'>!<</><span class='hg'>input</> <span class='ho'>type</><span class='hk'>=</><span class='hs'>\"radio\"</> <span class='ho'>name</><span class='hk'>=</><span class='hd'>{</><span class='hv'>nm</><span class='hd'>}</> <span class='ho'>value</><span class='hk'>=</><span class='hs'>\"C\"</> <span class='hd'>@</><span class='ho'>value</><span class='hk'>=</><span class='hd'>{</><span class='hd'>=</><span class='hv'>$</>.<span class='hv'>selection</><span class='hd'>}</><span class='hp'>!/</><span class='hp'>></><span class='hs'> # C #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div> </><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='ho'>class</><span class='hk'>=</><span class='hs'>\"output\"</><span class='hp'>></><span class='hs'> # Output: #</> <span class='hp'>!<</><span class='hp'>!/</><span class='hp'>></></><div>    <span class='hr'>const</> <span class='hv'>c</> <span class='hk'>=</> <span class='hv'>selection</><span class='hk'>===</><span class='hs'>\"A\"</><span class='hk'>?</> <span class='hv'>contentA</> <span class='hk'>:</> (<span class='hv'>selection</><span class='hk'>===</><span class='hs'>\"B\"</><span class='hk'>?</> <span class='hv'>contentB</> <span class='hk'>:</> <span class='hv'>contentC</>);</><div>    <span class='hp'>!<</><span class='hg'>div</> <span class='hd'>@</><span class='ho'>xtrContent</><span class='hd'>(</><span class='ho'>xtr</><span class='hk'>=</><span class='hd'>{</><span class='hv'>c</><span class='hd'>}</> <span class='ho'>resolver</><span class='hk'>=</><span class='hd'>{</><span class='hv'>xtrResolver</><span class='hd'>}</><span class='hd'>)</> <span class='hp'>!/</><span class='hp'>></></><div>}`);</><div> </><div><span class='hf'>main</>().<span class='hf'>attach</>(<span class='hv'>document</>.<span class='hv'>body</>).<span class='hf'>render</>();</></></><div class='text'><p> Some comment </></>"}]}]},A=function(){function l(){}return s([a(n),p("design:type",String)],l.prototype,"categoryCode",void 0),s([a(n),p("design:type",String)],l.prototype,"itemCode",void 0),l=s([c],l)}(),N=new A;function D(s){M=s,s.add({"/examples/*":function(s,a){a.pageContent=_,N.categoryCode=B.categories[0].code,N.itemCode=B.categories[0].items[0].code},"/examples/:name":function(s,a){a.pageContent=_,z(s.pathParams.name)}})}function H(s){var a=s.target.dataset;a.page&&M.navigate("/examples/"+a.page)}var O,P,j,R,q,V,K,X,U,W=(O={},P=["class","main_menu"],j=["class","title"],R=[" ",""," "],q=["class","content"],V=["",""],K=[2],X=[4],U=function(){function a(){}return s([l(),p("design:type",Object)],a.prototype,"content",void 0),s([l(h(A)),p("design:type",A)],a.prototype,"state",void 0),a=s([t],a)}(),e("menu","examples/examples.ts",O,(function(s,a,n){var p,c,l,h,t=n.content,e=n.state,f=0,b=0,x=i(s,O,3);d(s,x,0,0,"div",1,0,P),v(s,x,1,0,"click",H),o(s,x,2,1,1);for(var y=0,$=t.categories;y<$.length;y++){var C=$[y];b=0,c=(p=r(s,0,2,5,++f)).cm;var I=C.code===e.categoryCode?" selected":"";d(p,c,0,0,"div",1),k(p,0,0,"class",m(p,0,"menu cat container"+I)),d(p,c,1,1,"div",1,0,j),u(p,c,0,2,2,0,R,1,m(p,1,C.title)),d(p,c,3,1,"ul",1,0,q),o(p,c,4,2,1);for(var w=0,S=C.items;w<S.length;w++){var L=S[w];h=(l=r(p,0,4,2,++b)).cm,d(l,h,0,0,"li",1),k(l,0,0,"data-page",m(l,0,L.code)),k(l,0,0,"class",m(l,1,L.code===e.itemCode?"selected":"")),u(l,h,0,1,1,0,V,1,m(l,2,L.title)),g(l)}g(p,c,X)}g(s,x,K)}),U)),F=function(){function l(){}return s([a(n),p("design:type",String)],l.prototype,"name",void 0),s([a(),p("design:type",Object)],l.prototype,"$content",void 0),l=s([c],l)}(),J=function(){var a={},n=["class","notions"],c=["class","title"],v=[" Notion",""," covered in this example "],k=["class","notion"],y=["class","name"],$=["",""],C=[4],I=[3],w=function(){function a(){}return s([l(f(h(F))),p("design:type",Array)],a.prototype,"notionList",void 0),a=s([t],a)}();return e("notions","examples/examples.ts",a,(function(s,p,l){var h,t,e,f,w=l.notionList,S=0,L=0,E=i(s,a,5),T=w.length;d(s,E,0,0,"div",1,0,n),d(s,E,1,1,"div",1,0,c),u(s,E,0,2,2,0,v,1,m(s,0,1!==T?"s":"")),d(s,E,3,1,"ul",1),o(s,E,4,2,1);for(var M=0,B=w;M<B.length;M++){var A=B[M];L=0,t=(h=r(s,0,4,4,++S)).cm,d(h,t,0,0,"li",1,0,k),d(h,t,1,1,"span",1,0,y),u(h,t,0,2,2,0,$,1,m(h,0,A.name)),o(h,t,3,1,1),A.$content&&(f=(e=r(h,0,3,3,++L)).cm,b(e,f,0,0),u(e,f,0,1,1,0,": ",0),b(e,f,2,1),x(e,0,2,m(e,0,A.$content)),g(e)),g(h,t,I)}g(s,E,C)}),w)}();function Y(s){return L(this,void 0,void 0,(function(){return E(this,(function(a){return"code"===s?[2,T]:"notions"===s?[2,J]:(console.error("UNRESOLVED XTR REFERENCE (examples): "+s),[2,null])}))}))}function z(s,a){void 0===a&&(a=!0);for(var n="",p="",c=0,l=B.categories;c<l.length;c++){var h=l[c];""===n&&(n=h.code);for(var t=0,e=h.items;t<e.length;t++){var i=e[t];if(""===p&&(p=i.code),i.code===s)return a&&(N.itemCode=s,N.categoryCode=h.code),i}}return a?(N.categoryCode=n,void(N.itemCode=p)):{title:"",code:"error",content:""}}var G=function(){var a={},n=["class","examples layout layout2"],c=["class","blockA2"],v=["class","menu"],f=["class","mainpanel"],b=["class","blockB2"],x=["class","demo"],L=["target","_blank","title","Open demo in a separate window"],E=["class","clock"],T=[7],M=function(){function a(){}return s([l(h(A)),p("design:type",A)],a.prototype,"state",void 0),a=s([t],a)}();return e("mainLayout","examples/examples.ts",a,(function(s,p,l){var h,t,e=l.state,M=0,A=i(s,a,8),N=z(e.itemCode);d(s,A,0,0,"div",1,0,n),d(s,A,1,1,"div",1,0,c),d(s,A,2,2,"div",1,0,v),y(s,A,0,3,3,m(s,0,W),0),$(s,A,0,3,"content",m(s,1,B)),$(s,A,0,3,"state",m(s,2,e)),C(s,3),d(s,A,4,2,"div",0,0,f),I(s,A,0,5,4,"xtrContent",S,2),$(s,A,0,5,"xtr",m(s,3,N.content)),$(s,A,0,5,"resolver",m(s,4,Y)),w(s,A,0,5),d(s,A,6,1,"div",1,0,b),o(s,A,7,2,1),N.code&&(t=(h=r(s,0,7,5,++M)).cm,d(h,t,0,0,"div",1,0,x),d(h,t,1,1,"h1",1),d(h,t,2,2,"a",1,0,L),k(h,0,2,"href",m(h,0,"/examples/"+N.code+"/")),u(h,t,0,3,3,0," live demo ",0),d(h,t,4,1,"iframe",0,0,E),k(h,0,4,"src",m(h,1,"/examples/"+N.code+"/")),g(h)),g(s,A,T)}),M)}(),_=function(){var a={},n=function(){function a(){}return s([l(h(A)),p("design:type",A)],a.prototype,"state",void 0),a=s([t],a)}();return e("pageLayout","examples/examples.ts",a,(function(s,n,p){p.state;var c=i(s,a,1);y(s,c,0,0,0,m(s,0,G),0),$(s,c,0,0,"state",m(s,1,N)),C(s,0),g(s)}),n)}();export{A as PageState,D as loadRoutes};
